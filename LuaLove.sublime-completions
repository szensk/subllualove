{
	"scope": "source.lua.love - comment.block.documentation",
	"completions": [

		// =====================================
		// Lua and LuaJIT functions and keywords
		// =====================================

		// Keywords

		{
			"trigger": "true",
			"annotation": "",
			"contents": "true",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "false",
			"annotation": "",
			"contents": "false",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "nil",
			"annotation": "",
			"contents": "nil",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "and",
			"annotation": "",
			"contents": "and",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "or",
			"annotation": "",
			"contents": "or",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "not",
			"annotation": "",
			"contents": "not",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "in",
			"annotation": "",
			"contents": "in",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "break",
			"annotation": "",
			"contents": "break",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "if",
			"annotation": "",
			"contents": "if",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "else",
			"annotation": "",
			"contents": "else",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "elseif",
			"annotation": "",
			"contents": "elseif",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "then",
			"annotation": "",
			"contents": "then",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "while",
			"annotation": "",
			"contents": "while",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "do",
			"annotation": "",
			"contents": "do",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "end",
			"annotation": "",
			"contents": "end",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "local",
			"annotation": "",
			"contents": "local",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "return",
			"annotation": "",
			"contents": "return",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "function",
			"annotation": "",
			"contents": "function",
			"kind": "keyword",
			"details": ""
		},
		{
			"trigger": "for",
			"annotation": "",
			"contents": "for",
			"kind": "keyword",
			"details": ""
		},

		// Global variables
		{
			"trigger": "_G",
			"annotation": "",
			"contents": "_G",
			"kind": "variable",
			"details": "Table containing global environment (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-_G\">Manual</a>)"
		},
		{
			"trigger": "_VERSION",
			"annotation": "",
			"contents": "_VERSION",
			"kind": "variable",
			"details": "String holding interpreter version (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-_VERSION\">Manual</a>)"
		},

		// Built-in core functions

		{
			"trigger": "assert",
			"annotation": "(v [, message])",
			"contents": "assert(${1:v}, ${2:message})",
			"kind": "function",
			"details": "Issues error if value <code>v</code> is false (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-assert\">Manual</a>)"
		},
		{
			"trigger": "collectgarbage",
			"annotation": "([opt [, arg]])",
			"contents": "collectgarbage(${1:opt}, ${2:arg})",
			"kind": "function",
			"details": "Generic interface to garbage collector (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-collectgarbage\">Manual</a>)"
		},
		{
			"trigger": "dofile",
			"annotation": "([filename])",
			"contents": "dofile(${1:filename})",
			"kind": "function",
			"details": "Executes contents of file or stdin (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-dofile\">Manual</a>)"
		},
		{
			"trigger": "error",
			"annotation": "(message [, level])",
			"contents": "error(${1:message}, ${2:level})",
			"kind": "function",
			"details": "Terminates last protected function with message (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-error\">Manual</a>)"
		},
		{
			"trigger": "getfenv",
			"annotation": "([f])",
			"contents": "getfenv(${1:f})",
			"kind": "function",
			"details": "Returns the current environment in use by the function (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-getfenv\">Manual</a>)"
		},
		{
			"trigger": "getmetatable",
			"annotation": "(object)",
			"contents": "getmetatable(${1:object})",
			"kind": "function",
			"details": "Returns metatable of the object or nil (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-getmetatable\">Manual</a>)"
		},
		{
			"trigger": "ipairs",
			"annotation": "(t)",
			"contents": "ipairs(${1:t})",
			"kind": "function",
			"details": "Iterates over indice-value pairs of numerical table (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-ipairs\">Manual</a>)"
		},
		{
			"trigger": "load",
			"annotation": "(func [, chunkname])",
			"contents": "load(${1:func}, ${2:chunkname})",
			"kind": "function",
			"details": "Loads a chunk using function to get its pieces (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-load\">Manual</a>)"
		},
		{
			"trigger": "loadfile",
			"annotation": "([filename])",
			"contents": "loadfile(${1:filename})",
			"kind": "function",
			"details": "Loads a chunk using contents of file or stdin (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-loadfile\">Manual</a>)"
		},
		{
			"trigger": "loadstring",
			"annotation": "(string [, chunkname])",
			"contents": "loadstring(${1:string}, ${2:chunkname})",
			"kind": "function",
			"details": "Loads a chunk using contents of string (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-loadstring\">Manual</a>)"
		},
		{
			"trigger": "next",
			"annotation": "(table [, index])",
			"contents": "next(${1:table}, ${2:index})",
			"kind": "function",
			"details": "Allows a program to traverse all fields of a table (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-next\">Manual</a>)"
		},
		{
			"trigger": "pairs",
			"annotation": "(t)",
			"contents": "pairs(${1:t})",
			"kind": "function",
			"details": "Iterates over key-value pairs of table (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-pairs\">Manual</a>)"
		},
		{
			"trigger": "pcall",
			"annotation": "(f [, arg1 [, ...]])",
			"contents": "pcall(${1:f}, ${2:arg1}, ${3:...})",
			"kind": "function",
			"details": "Calls function with arguments in protected mode (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-pcall\">Manual</a>)"
		},
		{
			"trigger": "print",
			"annotation": "([...])",
			"contents": "print(${1:...})",
			"kind": "function",
			"details": "Prints content of arguments to stdout (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-print\">Manual</a>)"
		},
		{
			"trigger": "rawequal",
			"annotation": "(v1, v2)",
			"contents": "rawequal(${1:v1}, ${2:v2})",
			"kind": "function",
			"details": "Checks whatever <code>v1</code> and <code>v2</code> are equal without invoking any metamethod (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-rawequal\">Manual</a>)"
		},
		{
			"trigger": "rawget",
			"annotation": "(table, index)",
			"contents": "rawget(${1:table}, ${2:index})",
			"kind": "function",
			"details": "gets the real value of <code>table[index]</code>, without invoking any metamethod (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-rawget\">Manual</a>)"
		},
		{
			"trigger": "rawset",
			"annotation": "(table, index, value)",
			"contents": "rawset(${1:table}, ${2:index}, ${3:value})",
			"kind": "function",
			"details": "Sets the real value of <code>table[index]</code> to <code>value</code>, without invoking any metamethod (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-rawset\">Manual</a>)"
		},
		{
			"trigger": "select",
			"annotation": "(index, ...)",
			"contents": "select(${1:index}, ${2:...})",
			"kind": "function",
			"details": "Returns all arguments after argument number <code>index</code> or total number of arguments if <code>index</code> is \"#\" (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-select\">Manual</a>)"
		},
		{
			"trigger": "setfenv",
			"annotation": "(f, table)",
			"contents": "setfenv(${1:f}, ${2:table})",
			"kind": "function",
			"details": "Sets the environment to be used by given function (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-setfenv\">Manual</a>)"
		},
		{
			"trigger": "setmetatable",
			"annotation": "(table, metatable)",
			"contents": "setmetatable(${1:table}, ${2:metatable})",
			"kind": "function",
			"details": "Sets the metatable for the given table (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-setmetatable\">Manual</a>)"
		},
		{
			"trigger": "tonumber",
			"annotation": "(e [, base])",
			"contents": "tonumber(${1:e}, ${2:base})",
			"kind": "function",
			"details": "Tries to convert argument <code>e</code> to a number with <code>base</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-tonumber\">Manual</a>)"
		},
		{
			"trigger": "tostring",
			"annotation": "(e)",
			"contents": "tostring(${1:e})",
			"kind": "function",
			"details": "Tries to convert argument <code>e</code> to a string (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-tostring\">Manual</a>)"
		},
		{
			"trigger": "type",
			"annotation": "(v)",
			"contents": "type(${1:v})",
			"kind": "function",
			"details": "Returns type of argument <code>v</code> as string (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-type\">Manual</a>)"
		},
		{
			"trigger": "unpack",
			"annotation": "(list [, i [, j]])",
			"contents": "unpack(${1:list}, ${2:i}, ${3:j})",
			"kind": "function",
			"details": "Returns elements from the given table from index <code>i</code> to <code>j</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-unpack\">Manual</a>)"
		},
		{
			"trigger": "xpcall",
			"annotation": "(f, err)",
			"contents": "xpcall(${1:f}, ${2:err})",
			"kind": "function",
			"details": "Calls function with arguments in protected mode, executing function <code>f</code> in case of unhandled error (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-xpcall\">Manual</a>)"
		},

		// Coroutine library

		{
			"trigger": "coroutine.create",
			"annotation": "(f)",
			"contents": "coroutine.create(${1:f})",
			"kind": "function",
			"details": "Creates a new coroutine with body <code>f</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-coroutine.create\">Manual</a>)"
		},
		{
			"trigger": "coroutine.resume",
			"annotation": "(co [, val1, ...])",
			"contents": "coroutine.resume(${1:co}, ${2:val1}, ${3:...})",
			"kind": "function",
			"details": "Starts / continues the execution of coroutine <code>co</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-coroutine.resume\">Manual</a>)"
		},
		{
			"trigger": "coroutine.running",
			"annotation": "()",
			"contents": "coroutine.running()",
			"kind": "function",
			"details": "Returns the running coroutine, or <code>nil</code> when called by the main thread (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-coroutine.running\">Manual</a>)"
		},
		{
			"trigger": "coroutine.status",
			"annotation": "(co)",
			"contents": "coroutine.status(${1:co})",
			"kind": "function",
			"details": "Returns status of coroutine <code>co</code>: <code>\"running\"</code> / <code>\"suspended\"</code> / <code>\"yield\"</code> / <code>\"normal\"</code> / <code>\"dead\"</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-coroutine.status\">Manual</a>)"
		},
		{
			"trigger": "coroutine.wrap",
			"annotation": "(f)",
			"contents": "coroutine.wrap(${1:f})",
			"kind": "function",
			"details": "Creates a new coroutine and returns a function that resumes the coroutine each time it is called (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-coroutine.wrap\">Manual</a>)"
		},
		{
			"trigger": "coroutine.yield",
			"annotation": "(...)",
			"contents": "coroutine.yield(${1:...})",
			"kind": "function",
			"details": "Suspends the execution of the calling coroutine and passes arguments as extra results to <code>coroutine.resume</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-coroutine.yield\">Manual</a>)"
		},


		// Modules library

		{
			"trigger": "module",
			"annotation": "(name [, ...])",
			"contents": "module(${1:name}, ${2:...})",
			"kind": "function",
			"details": "Creates a module (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-module\">Manual</a>)"
		},
		{
			"trigger": "require",
			"annotation": "(name)",
			"contents": "require(${1:name})",
			"kind": "function",
			"details": "Loads given module (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-require\">Manual</a>)"
		},
		{
			"trigger": "package.cpath",
			"annotation": "package.cpath",
			"contents": "package.cpath",
			"kind": "variable",
			"details": "Path used by <code>require</code> to search for a C loader (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-package.cpath\">Manual</a>)"
		},
		{
			"trigger": "package.loaded",
			"annotation": "package.loaded",
			"contents": "package.loaded",
			"kind": "variable",
			"details": "A table used by <code>require</code> to control which modules are already loaded (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-package.loaded\">Manual</a>)"
		},
		{
			"trigger": "package.loaders",
			"annotation": "package.loaders",
			"contents": "package.loaders",
			"kind": "variable",
			"details": "A table used by <code>require</code> to control how to load modules (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-package.loaders\">Manual</a>)"
		},
		{
			"trigger": "package.loadlib",
			"annotation": "(libname, funcname)",
			"contents": "package.loadlib(${1:libname}, ${2:funcname})",
			"kind": "function",
			"details": "Dynamically link the host program with the C library <code>libname</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-package.loadlib\">Manual</a>)"
		},
		{
			"trigger": "package.path",
			"annotation": "package.path",
			"contents": "package.path",
			"kind": "variable",
			"details": "Path used by <code>require</code> to search for a Lua loader (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-package.path\">Manual</a>)"
		},
		{
			"trigger": "package.preload",
			"annotation": "package.preload",
			"contents": "package.preload",
			"kind": "variable",
			"details": "A table to store loaders for specific modules (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-package.preload\">Manual</a>)"
		},
		{
			"trigger": "package.seeall",
			"annotation": "(module)",
			"contents": "package.seeall(${1:module})",
			"kind": "function",
			"details": "Sets a metatable for <code>module</code> with its <code>__index</code> field referring to the global environment (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-package.seeall\">Manual</a>)"
		},


		// String library

		{
			"trigger": "string.byte",
			"annotation": "(s [, i [, j]])",
			"contents": "string.byte(${1:s}, ${2:i}, ${3:j})",
			"kind": "function",
			"details": "Return the internal numerical codes of the characters from index <code>i</code> to <code>j</code>(<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.byte\">Manual</a>)"
		},
		{
			"trigger": "string.char",
			"annotation": "(...)",
			"contents": "string.char(${1:...})",
			"kind": "function",
			"details": "Returns a string where each character is equal to internal numerical code value of the corresponding argument (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.char\">Manual</a>)"
		},
		{
			"trigger": "string.dump",
			"annotation": "(function)",
			"contents": "string.dump(${1:function})",
			"kind": "function",
			"details": "Returns a string containing binary representation of the given function (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.dump\">Manual</a>)"
		},
		{
			"trigger": "string.find",
			"annotation": "(s, pattern [, init [, plain]])",
			"contents": "string.find(${1:s}, ${2:pattern}, ${3:init}, ${4:plain})",
			"kind": "function",
			"details": "Looks for the first match of <code>pattern</code> in the string <code>s</code> starting from <code>init</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.find\">Manual</a>)"
		},
		{
			"trigger": "string.format",
			"annotation": "(formatstring, ...)",
			"contents": "string.format(${1:formatstring}, ${2:...})",
			"kind": "function",
			"details": "Return a formatted version of string (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.format\">Manual</a>)"
		},
		{
			"trigger": "string.gmatch",
			"annotation": "(s, pattern)",
			"contents": "string.gmatch(${1:s}, ${2:pattern})",
			"kind": "function",
			"details": "Returns an iterator function that returns the next captures from <code>pattern</code> over string <code>s</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.gmatch\">Manual</a>)"
		},
		{
			"trigger": "string.gsub",
			"annotation": "(s, pattern, repl [, n])",
			"contents": "string.gsub(${1:s}, ${2:pattern}, ${3:repl}, ${4:n})",
			"kind": "function",
			"details": "Returns a copy of <code>s</code> where all occurrences of the <code>pattern</code> starting from <code>n</code> are replace by <code>repl</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.gsub\">Manual</a>)"
		},
		{
			"trigger": "string.len",
			"annotation": "(s)",
			"contents": "string.len(${1:s})",
			"kind": "function",
			"details": "Return length of string (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.len\">Manual</a>)"
		},
		{
			"trigger": "string.lower",
			"annotation": "(s)",
			"contents": "string.lower(${1:s})",
			"kind": "function",
			"details": "Returns a copy of <code>s</code> where all letters are lowercase (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.lower\">Manual</a>)"
		},
		{
			"trigger": "string.match",
			"annotation": "(s, pattern [, init])",
			"contents": "string.match(${1:s}, ${2:pattern}, ${3:init})",
			"kind": "function",
			"details": "Returns first match of <code>pattern</code> in string <code>s</code> starting from <code>init</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.match\">Manual</a>)"
		},
		{
			"trigger": "string.rep",
			"annotation": "(s, n)",
			"contents": "string.rep(${1:s}, ${2:n})",
			"kind": "function",
			"details": "Returns <code>s</code> repeated <code>n</code> times (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.rep\">Manual</a>)"
		},
		{
			"trigger": "string.reverse",
			"annotation": "(s)",
			"contents": "string.reverse(${1:s})",
			"kind": "function",
			"details": "Returns reversed string <code>s</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.reverse\">Manual</a>)"
		},
		{
			"trigger": "string.sub",
			"annotation": "(s, i [, j])",
			"contents": "string.sub(${1:s}, ${2:i}, ${3:j})",
			"kind": "function",
			"details": "Returns the substring of <code>s</code> that starts at <code>i</code> and continues until <code>j</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.sub\">Manual</a>)"
		},
		{
			"trigger": "string.upper",
			"annotation": "(s)",
			"contents": "string.upper(${1:s})",
			"kind": "function",
			"details": "Returns a copy of <code>s</code> where all letters are uppercase (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.upper\">Manual</a>)"
		},

		// Methods (experimental)

		{
			"trigger": ":byte",
			"annotation": "([i [, j]])",
			"contents": "byte(${1:i}, ${2:j})",
			"kind": ["function", "m", "Method"],
			"details": "Return the internal numerical codes of the characters from index <code>i</code> to <code>j</code>(<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.byte\">Manual</a>)"
		},
		{
			"trigger": ":find",
			"annotation": "(pattern [, init [, plain]])",
			"contents": "find(${1:pattern}, ${2:init}, ${3:plain})",
			"kind": ["function", "m", "Method"],
			"details": "Looks for the first match of <code>pattern</code> in the string <code>s</code> starting from <code>init</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.find\">Manual</a>)"
		},
		{
			"trigger": ":format",
			"annotation": "(...)",
			"contents": "format(${1:...})",
			"kind": ["function", "m", "Method"],
			"details": "Return a formatted version of string (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.format\">Manual</a>)"
		},
		{
			"trigger": ":gmatch",
			"annotation": "(pattern)",
			"contents": "gmatch(${1:pattern})",
			"kind": ["function", "m", "Method"],
			"details": "Returns an iterator function that returns the next captures from <code>pattern</code> over string <code>s</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.gmatch\">Manual</a>)"
		},
		{
			"trigger": ":gsub",
			"annotation": "(pattern, repl [, n])",
			"contents": "gsub(${1:pattern}, ${2:repl}, ${3:n})",
			"kind": ["function", "m", "Method"],
			"details": "Returns a copy of <code>s</code> where all occurrences of the <code>pattern</code> starting from <code>n</code> are replace by <code>repl</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.gsub\">Manual</a>)"
		},
		{
			"trigger": ":len",
			"annotation": "()",
			"contents": "len()",
			"kind": ["function", "m", "Method"],
			"details": "Return length of string (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.len\">Manual</a>)"
		},
		{
			"trigger": ":lower",
			"annotation": "()",
			"contents": "lower()",
			"kind": ["function", "m", "Method"],
			"details": "Returns a copy of <code>s</code> where all letters are lowercase (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.lower\">Manual</a>)"
		},
		{
			"trigger": ":match",
			"annotation": "(pattern [, init])",
			"contents": "match(${1:pattern}, ${2:init})",
			"kind": ["function", "m", "Method"],
			"details": "Returns first match of <code>pattern</code> in string <code>s</code> starting from <code>init</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.match\">Manual</a>)"
		},
		{
			"trigger": ":rep",
			"annotation": "(n)",
			"contents": "rep(${1:n})",
			"kind": ["function", "m", "Method"],
			"details": "Returns <code>s</code> repeated <code>n</code> times (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.rep\">Manual</a>)"
		},
		{
			"trigger": ":reverse",
			"annotation": "()",
			"contents": "reverse()",
			"kind": ["function", "m", "Method"],
			"details": "Returns reversed string <code>s</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.reverse\">Manual</a>)"
		},
		{
			"trigger": ":sub",
			"annotation": "(i [, j])",
			"contents": "sub(${1:i}, ${2:j})",
			"kind": ["function", "m", "Method"],
			"details": "Returns the substring of <code>s</code> that starts at <code>i</code> and continues until <code>j</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.sub\">Manual</a>)"
		},
		{
			"trigger": ":upper",
			"annotation": "()",
			"contents": "upper()",
			"kind": ["function", "m", "Method"],
			"details": "Returns a copy of <code>s</code> where all letters are uppercase (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-string.upper\">Manual</a>)"
		},


		// Table library

		{
			"trigger": "table.concat",
			"annotation": "table.concat",
			"contents": "table.concat(${1:tablename}${2:, \", \"}${3:, start_index}${4:, end_index})",
			"kind": "function",
			"details": "Concatenates elements of <code>table</code> from <code>i</code> to <code>j</code> with <code>sep</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-table.concat\">Manual</a>)"
		},
		{
			"trigger": "table.insert",
			"annotation": "(table, [pos,] value)",
			"contents": "table.insert(${1:table}, ${2:pos}, ${3:value})",
			"kind": "function",
			"details": "Inserts <code>value</code> to <code>table</code> at the end of table or position <code>pos</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-table.insert\">Manual</a>)"
		},
		{
			"trigger": "table.maxn",
			"annotation": "(table)",
			"contents": "table.maxn(${1:table})",
			"kind": "function",
			"details": "Returns largest positive numerical index of the given <code>table</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-table.maxn\">Manual</a>)"
		},
		{
			"trigger": "table.remove",
			"annotation": "(table [, pos])",
			"contents": "table.remove(${1:table}, ${2:pos})",
			"kind": "function",
			"details": "Removes last element from <code>table</code> or elements at position <code>pos</code> shifting down other elements to close the space (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-table.remove\">Manual</a>)"
		},
		{
			"trigger": "table.sort",
			"annotation": "table.sort",
			"contents": "table.sort( ${1:tablename}${2:, sortfunction} )",
			"kind": "function",
			"details": "Sorts <code>table</code> elements in given order with optional function <code>comp</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-table.sort\">Manual</a>)"
		},

		// Math library

		{
			"trigger": "math.abs",
			"annotation": "(x)",
			"contents": "math.abs(${1:x})",
			"kind": "function",
			"details": "Returns the absolute value of <code>x</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.abs\">Manual</a>)"
		},
		{
			"trigger": "math.acos",
			"annotation": "(x)",
			"contents": "math.acos(${1:x})",
			"kind": "function",
			"details": "Returns the arc cosine of <code>x</code> in radians (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.acos\">Manual</a>)"
		},
		{
			"trigger": "math.asin",
			"annotation": "(x)",
			"contents": "math.asin(${1:x})",
			"kind": "function",
			"details": "Returns the arc sine of <code>x</code> in radians (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.asin\">Manual</a>)"
		},
		{
			"trigger": "math.atan2",
			"annotation": "(y, x)",
			"contents": "math.atan2(${1:y}, ${2:x})",
			"kind": "function",
			"details": "Returns the arc tangent of <code>y/x</code> in radians, also handling the case of <code>x</code> being zero (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.atan2\">Manual</a>)"
		},
		{
			"trigger": "math.ceil",
			"annotation": "(x)",
			"contents": "math.ceil(${1:x})",
			"kind": "function",
			"details": "Returns the smallest integer larger than or equal to <code>x</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.ceil\">Manual</a>)"
		},
		{
			"trigger": "math.cosh",
			"annotation": "(x)",
			"contents": "math.cosh(${1:x})",
			"kind": "function",
			"details": "Returns the hyperbolic cosine of <code>x</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.cosh\">Manual</a>)"
		},
		{
			"trigger": "math.cos",
			"annotation": "(x)",
			"contents": "math.cos(${1:x})",
			"kind": "function",
			"details": "Returns the cosine of <code>x</code> assumed to be in radians (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.cos\">Manual</a>)"
		},
		{
			"trigger": "math.deg",
			"annotation": "(x)",
			"contents": "math.deg(${1:x})",
			"kind": "function",
			"details": "Returns the angle <code>x</code> (given in radians) in degrees (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.deg\">Manual</a>)"
		},
		{
			"trigger": "math.exp",
			"annotation": "(x)",
			"contents": "math.exp(${1:x})",
			"kind": "function",
			"details": "Returns the value <code>e^x</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.exp\">Manual</a>)"
		},
		{
			"trigger": "math.floor",
			"annotation": "(x)",
			"contents": "math.floor(${1:x})",
			"kind": "function",
			"details": "Returns the largest integer smaller than or equal to <code>x</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.floor\">Manual</a>)"
		},
		{
			"trigger": "math.fmod",
			"annotation": "(x, y)",
			"contents": "math.fmod(${1:x}, ${2:y})",
			"kind": "function",
			"details": "Returns the remainder of the division of <code>x</code> by <code>y</code> that rounds the quotient towards zero(<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.fmod\">Manual</a>)"
		},
		{
			"trigger": "math.frexp",
			"annotation": "(x)",
			"contents": "math.frexp(${1:x})",
			"kind": "function",
			"details": "Returns <code>m</code> and <code>e</code> such that <code>x = m*2^e</code>, <code>e</code> is an integer and the absolute value of <code>m</code> is in the range [0.5, 1) (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.frexp\">Manual</a>)"
		},
		{
			"trigger": "math.huge",
			"annotation": "math.huge",
			"contents": "math.huge",
			"kind": "variable",
			"details": "The value <code>HUGE_VAL</code>, a value larger than or equal to any other numerical value (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.huge\">Manual</a>)"
		},
		{
			"trigger": "math.ldexp",
			"annotation": "(m, e)",
			"contents": "math.ldexp(${1:m}, ${2:e})",
			"kind": "function",
			"details": "Returns <code>m*2^e</code> (<code>e</code> should be an integer) (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.ldexp\">Manual</a>)"
		},
		{
			"trigger": "math.log10",
			"annotation": "(x)",
			"contents": "math.log10(${1:x})",
			"kind": "function",
			"details": "Returns the base-10 logarithm of <code>x</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.log10\">Manual</a>)"
		},
		{
			"trigger": "math.log",
			"annotation": "(x)",
			"contents": "math.log(${1:x})",
			"kind": "function",
			"details": "Returns the natural logarithm of <code>x</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.log\">Manual</a>)"
		},
		{
			"trigger": "math.max",
			"annotation": "(x, ...)",
			"contents": "math.max(${1:x}, ${2:...})",
			"kind": "function",
			"details": "Returns the maximum value among its arguments (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.max\">Manual</a>)"
		},
		{
			"trigger": "math.min",
			"annotation": "(x, ...)",
			"contents": "math.min(${1:x}, ${2:...})",
			"kind": "function",
			"details": "Returns the minimum value among its arguments (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.min\">Manual</a>)"
		},
		{
			"trigger": "math.modf",
			"annotation": "(x)",
			"contents": "math.modf(${1:x})",
			"kind": "function",
			"details": "Returns two numbers, the integral part of <code>x</code> and the fractional part of <code>x</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.modf\">Manual</a>)"
		},
		{
			"trigger": "math.pi",
			"annotation": "math.pi",
			"contents": "math.pi",
			"kind": "variable",
			"details": "The value of <code>pi</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.pi\">Manual</a>)"
		},
		{
			"trigger": "math.pow",
			"annotation": "(x, y)",
			"contents": "math.pow(${1:x}, ${2:y})",
			"kind": "function",
			"details": "Returns <code>x^y</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.pow\">Manual</a>)"
		},
		{
			"trigger": "math.rad",
			"annotation": "(x)",
			"contents": "math.rad(${1:x})",
			"kind": "function",
			"details": "Returns the angle <code>x</code> (given in degrees) in radians (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.rad\">Manual</a>)"
		},
		{
			"trigger": "math.randomseed",
			"annotation": "(x)",
			"contents": "math.randomseed(${1:x})",
			"kind": "function",
			"details": "Sets <code>x</code> as the \"seed\" for the pseudo-random generator (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.randomseed\">Manual</a>)"
		},
		{
			"trigger": "math.random",
			"annotation": "([m [, n]])",
			"contents": "math.random(${1:m}, ${2:n})",
			"kind": "function",
			"details": "Returns a pseudo-random real number from given range defaulting to [0, 1) (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.random\">Manual</a>)"
		},
		{
			"trigger": "math.sinh",
			"annotation": "(x)",
			"contents": "math.sinh(${1:x})",
			"kind": "function",
			"details": "Returns the hyperbolic sine of <code>x</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.sinh\">Manual</a>)"
		},
		{
			"trigger": "math.sin",
			"annotation": "(x)",
			"contents": "math.sin(${1:x})",
			"kind": "function",
			"details": "Returns the sine of <code>x</code> assumed to be in radians (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.sin\">Manual</a>)"
		},
		{
			"trigger": "math.sqrt",
			"annotation": "(x)",
			"contents": "math.sqrt(${1:x})",
			"kind": "function",
			"details": "Returns the square root of <code>x</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.sqrt\">Manual</a>)"
		},
		{
			"trigger": "math.tanh",
			"annotation": "(x)",
			"contents": "math.tanh(${1:x})",
			"kind": "function",
			"details": "Returns the tangent of <code>x</code> assumed in radians (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.tanh\">Manual</a>)"
		},
		{
			"trigger": "math.tan",
			"annotation": "(x)",
			"contents": "math.tan(${1:x})",
			"kind": "function",
			"details": "Returns the hyperbolic tangent of <code>x</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-math.tan\">Manual</a>)"
		},

		// IO library

		{
			"trigger": "io.stdin",
			"annotation": "",
			"contents": "io.stdin",
			"kind": "variable",
			"details": "Standard input file handle (<a href=\"https://www.lua.org/manual/5.1/manual.html#5.7\">Manual</a>)"
		},
		{
			"trigger": "io.stdout",
			"annotation": "",
			"contents": "io.stdout",
			"kind": "variable",
			"details": "Standard output file handle (<a href=\"https://www.lua.org/manual/5.1/manual.html#5.7\">Manual</a>)"
		},
		{
			"trigger": "io.stderr",
			"annotation": "",
			"contents": "io.stderr",
			"kind": "variable",
			"details": "Standard error file handle (<a href=\"https://www.lua.org/manual/5.1/manual.html#5.7\">Manual</a>)"
		},

		{
			"trigger": "io.close",
			"annotation": "([file])",
			"contents": "io.close(${1:file})",
			"kind": "function",
			"details": "Closes <code>file</code> or default output file (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-io.close\">Manual</a>)"
		},
		{
			"trigger": "io.flush",
			"annotation": "()",
			"contents": "io.flush()",
			"kind": "function",
			"details": "Flushes default output file (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-io.flush\">Manual</a>)"
		},
		{
			"trigger": "io.input",
			"annotation": "([file])",
			"contents": "io.input(${1:file})",
			"kind": "function",
			"details": "Sets default input file from filename or file handle. Returns current default input file if no argument given (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-io.input\">Manual</a>)"
		},
		{
			"trigger": "io.lines",
			"annotation": "([filename])",
			"contents": "io.lines(${1:filename})",
			"kind": "function",
			"details": "Opens the given file (or default input file if no file given) in read mode and returns an iterator function returning individual lines (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-io.lines\">Manual</a>)"
		},
		{
			"trigger": "io.open",
			"annotation": "(filename [, mode])",
			"contents": "io.open(${1:filename}, ${2:mode})",
			"kind": "function",
			"details": "Opens file with <code>filename</code> in specified <code>mode</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-io.open\">Manual</a>)"
		},
		{
			"trigger": "io.output",
			"annotation": "([file])",
			"contents": "io.output(${1:file})",
			"kind": "function",
			"details": "Sets default output file from filename or file handle. Returns current default output file if no argument given (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-io.output\">Manual</a>)"
		},
		{
			"trigger": "io.popen",
			"annotation": "(prog [, mode])",
			"contents": "io.popen(${1:prog}, ${2:mode})",
			"kind": "function",
			"details": "Starts program <code>prog</code> in a separate process and returns a file handle for either reading or writing data according to the <code>mode</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-io.popen\">Manual</a>)"
		},
		{
			"trigger": "io.read",
			"annotation": "(...)",
			"contents": "io.read(${1:...})",
			"kind": "function",
			"details": "Reads data from default input file in specified format. Equivalent to <code>io.input():read</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-io.read\">Manual</a>)"
		},
		{
			"trigger": "io.tmpfile",
			"annotation": "()",
			"contents": "io.tmpfile()",
			"kind": "function",
			"details": "Returns a handle for a temporary file opened in update mode which is automatically removed when the program ends (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-io.tmpfile\">Manual</a>)"
		},
		{
			"trigger": "io.type",
			"annotation": "(obj)",
			"contents": "io.type(${1:obj})",
			"kind": "function",
			"details": "If <code>obj</code> is a valid file handle, returns <code>\"file\"</code> or <code>\"closed file\"</code>, else returns <code>nil</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-io.type\">Manual</a>)"
		},
		{
			"trigger": "io.write",
			"annotation": "(...)",
			"contents": "io.write(${1:...})",
			"kind": "function",
			"details": "Writes data to default output file. Equivalent to <code>io.output():write</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-io.write\">Manual</a>)"
		},

		// Methods (experimental)
		{
			"trigger": ":close",
			"annotation": "()",
			"contents": "close()",
			"kind": ["function", "m", "Method"],
			"details": "Closes <code>file</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-file:close\">Manual</a>)"
		},
		{
			"trigger": ":flush",
			"annotation": "()",
			"contents": "flush()",
			"kind": ["function", "m", "Method"],
			"details": "Saves any written data to <code>file</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-file:flush\">Manual</a>)"
		},
		{
			"trigger": ":lines",
			"annotation": "()",
			"contents": "lines()",
			"kind": ["function", "m", "Method"],
			"details": "Returns an iterator function returning individual lines of <code>file</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-file:lines\">Manual</a>)"
		},
		{
			"trigger": ":read",
			"annotation": "(...)",
			"contents": "read(${1:format})",
			"kind": ["function", "m", "Method"],
			"details": "Reads the <code>file</code> in specified format (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-file:read\">Manual</a>)"
		},
		{
			"trigger": ":seek",
			"annotation": "([whence] [, offset])",
			"contents": "seek(${1:whence}, ${1:offset})",
			"kind": ["function", "m", "Method"],
			"details": "Sets or gets the file position based on given arguments (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-file:seek\">Manual</a>)"
		},
		{
			"trigger": ":setvbuf",
			"annotation": "(mode [, size])",
			"contents": "setvbuf(${1:mode}, ${1:size})",
			"kind": ["function", "m", "Method"],
			"details": "Sets the buffering mode of <code>file</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-file:setvbuf\">Manual</a>)"
		},
		{
			"trigger": ":write",
			"annotation": "(...)",
			"contents": "write(${1:...})",
			"kind": ["function", "m", "Method"],
			"details": "Writes the value of each of its arguments to the <code>file</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-file:write\">Manual</a>)"
		},

		// OS library

		{
			"trigger": "os.clock",
			"annotation": "()",
			"contents": "os.clock()",
			"kind": "function",
			"details": "Returns an approximation of the amount in seconds of CPU time used by the program (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-os.clock\">Manual</a>)"
		},
		{
			"trigger": "os.date",
			"annotation": "([format [, time]])",
			"contents": "os.date(${1:format}, ${2:time})",
			"kind": "function",
			"details": "Returns a string or a table containing date and time formatted according to the given <code>format</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-os.date\">Manual</a>)"
		},
		{
			"trigger": "os.difftime",
			"annotation": "(t2, t1)",
			"contents": "os.difftime(${1:t2}, ${2:t1})",
			"kind": "function",
			"details": "Returns the number of seconds from time <code>t1</code> to time <code>t2</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-os.difftime\">Manual</a>)"
		},
		{
			"trigger": "os.execute",
			"annotation": "([command])",
			"contents": "os.execute(${1:command})",
			"kind": "function",
			"details": "Passes <code>command</code> to be executed by an operating system shell and returns a status code (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-os.execute\">Manual</a>)"
		},
		{
			"trigger": "os.exit",
			"annotation": "([code])",
			"contents": "os.exit(${1:code})",
			"kind": "function",
			"details": "Exits an program with an optional code (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-os.exit\">Manual</a>)"
		},
		{
			"trigger": "os.getenv",
			"annotation": "(varname)",
			"contents": "os.getenv(${1:varname})",
			"kind": "function",
			"details": "Returns the value of the process environment variable <code>varname</code> or nil (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-os.getenv\">Manual</a>)"
		},
		{
			"trigger": "os.remove",
			"annotation": "(filename)",
			"contents": "os.remove(${1:filename})",
			"kind": "function",
			"details": "Deletes the file or empty directory with the given name (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-os.remove\">Manual</a>)"
		},
		{
			"trigger": "os.rename",
			"annotation": "(oldname, newname)",
			"contents": "os.rename(${1:oldname}, ${2:newname})",
			"kind": "function",
			"details": "Renames file or directory named <code>oldname</code> to <code>newname</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-os.rename\">Manual</a>)"
		},
		{
			"trigger": "os.setlocale",
			"annotation": "(locale [, category])",
			"contents": "os.setlocale(${1:locale}, ${2:category})",
			"kind": "function",
			"details": "Sets the current locale of the program (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-os.setlocale\">Manual</a>)"
		},
		{
			"trigger": "os.time",
			"annotation": "([table])",
			"contents": "os.time(${1:table})",
			"kind": "function",
			"details": "Returns the current time or a time representing the date and time specified by the given <code>table</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-os.time\">Manual</a>)"
		},
		{
			"trigger": "os.tmpname",
			"annotation": "()",
			"contents": "os.tmpname()",
			"kind": "function",
			"details": "Returns a string with a file name that can be used for a temporary file (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-os.tmpname\">Manual</a>)"
		},

		// Debug library

		{
			"trigger": "debug.debug",
			"annotation": "()",
			"contents": "debug.debug()",
			"kind": "function",
			"details": "Enters an interactive mode with the user, running each string that user enters. Write word <code>cont</code> end debug mode (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-debug.debug\">Manual</a>)"
		},
		{
			"trigger": "debug.getfenv",
			"annotation": "(o)",
			"contents": "debug.getfenv(${1:o})",
			"kind": "function",
			"details": "Returns the environment of object <code>o</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-debug.getfenv\">Manual</a>)"
		},
		{
			"trigger": "debug.gethook",
			"annotation": "([thread])",
			"contents": "debug.gethook(${1:thread})",
			"kind": "function",
			"details": "Returns the current hook settings of the thread (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-debug.gethook\">Manual</a>)"
		},
		{
			"trigger": "debug.getinfo",
			"annotation": "([thread,] function [, what])",
			"contents": "debug.getinfo(${1:thread}, ${2:function}, ${3:what})",
			"kind": "function",
			"details": "Returns a table with information about a function (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-debug.getinfo\">Manual</a>)"
		},
		{
			"trigger": "debug.getlocal",
			"annotation": "([thread,] level, local)",
			"contents": "debug.getlocal(${1:thread}, ${2:level}, ${3:local})",
			"kind": "function",
			"details": "Returns the name and the value of the local variable with index <code>local</code> of the function at level <code>level</code> of the stack (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-debug.getlocal\">Manual</a>)"
		},
		{
			"trigger": "debug.getmetatable",
			"annotation": "(object)",
			"contents": "debug.getmetatable(${1:object})",
			"kind": "function",
			"details": "Returns the metatable of the given <code>object</code> or nil (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-debug.getmetatable\">Manual</a>)"
		},
		{
			"trigger": "debug.getregistry",
			"annotation": "()",
			"contents": "debug.getregistry()",
			"kind": "function",
			"details": "Returns the registry table (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-debug.getregistry\">Manual</a>)"
		},
		{
			"trigger": "debug.getupvalue",
			"annotation": "(func, up)",
			"contents": "debug.getupvalue(${1:func}, ${2:up})",
			"kind": "function",
			"details": "Returns the name and the value of the upvalue with index <code>up</code> of the function <code>func</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-debug.getupvalue\">Manual</a>)"
		},
		{
			"trigger": "debug.setfenv",
			"annotation": "(object, table)",
			"contents": "debug.setfenv(${1:object}, ${2:table})",
			"kind": "function",
			"details": "Sets the environment of the given <code>object</code> to the given <code>table</code>, returns <code>object</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-debug.setfenv\">Manual</a>)"
		},
		{
			"trigger": "debug.sethook",
			"annotation": "([thread,] hook, mask [, count])",
			"contents": "debug.sethook(${1:thread}, ${2:hook}, ${3:mask}, ${4:count})",
			"kind": "function",
			"details": "Sets the fiven function as a hook (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-debug.sethook\">Manual</a>)"
		},
		{
			"trigger": "debug.setlocal",
			"annotation": "([thread,] level, local, value)",
			"contents": "debug.setlocal(${1:thread}, ${2:level}, ${3:local}, ${4:value})",
			"kind": "function",
			"details": "Assigns the <code>value</code> to the local variable with index <code>local</code> of the function at level <code>level</code> of the stack (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-debug.setlocal\">Manual</a>)"
		},
		{
			"trigger": "debug.setmetatable",
			"annotation": "(object, table)",
			"contents": "debug.setmetatable(${1:object}, ${2:table})",
			"kind": "function",
			"details": "Sets the metatable for the given <code>object</code> to the given <code>table</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-debug.setmetatable\">Manual</a>)"
		},
		{
			"trigger": "debug.setupvalue",
			"annotation": "(func, up, value)",
			"contents": "debug.setupvalue(${1:func}, ${2:up}, ${3:value})",
			"kind": "function",
			"details": "Assigns the <code>value</code> to the upvalue with index <code>up</code> of the function <code>func</code> (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-debug.setupvalue\">Manual</a>)"
		},
		{
			"trigger": "debug.traceback",
			"annotation": "([thread,] [message [, level]])",
			"contents": "debug.traceback(${1:thread}, ${2:message}, ${3:level})",
			"kind": "function",
			"details": "Returns a string with a traceback of the call stack (<a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-debug.traceback\">Manual</a>)"
		},

		// JIT

		{
			"trigger": "jit.flush",
			"annotation": "([func [, recursive]])",
			"contents": "jit.flush(${1:func}, ${2:recursive})",
			"kind": "function",
			"details": "Flushes the whole cache of compiled code or function <code>func</code> when specified (<a href=\"https://luajit.org/ext_jit.html#jit_flush\">Manual</a>)"
		},
		{
			"trigger": "jit.off",
			"annotation": "([func [, recursive]])",
			"contents": "jit.off(${1:func}, ${2:recursive})",
			"kind": "function",
			"details": "Turns the whole JIT compiler off or only for function <code>func</code> when specified (<a href=\"https://luajit.org/ext_jit.html#jit_onoff\">Manual</a>)"
		},
		{
			"trigger": "jit.on",
			"annotation": "([func [, recursive]])",
			"contents": "jit.on(${1:func}, ${2:recursive})",
			"kind": "function",
			"details": "Turns the whole JIT compiler on or only for function <code>func</code> when specified (<a href=\"https://luajit.org/ext_jit.html#jit_onoff\">Manual</a>)"
		},
		{
			"trigger": "jit.status",
			"annotation": "()",
			"contents": "jit.status()",
			"kind": "function",
			"details": "Returns the current status of the JIT compiler (<a href=\"https://luajit.org/ext_jit.html#jit_status\">Manual</a>)"
		},
		{
			"trigger": "jit.version",
			"annotation": "",
			"contents": "jit.version",
			"kind": "variable",
			"details": "Variable containing the LuaJIT version string (<a href=\"https://luajit.org/ext_jit.html#jit_version\">Manual</a>)"
		},
		{
			"trigger": "jit.version_num",
			"annotation": "",
			"contents": "jit.version_num",
			"kind": "variable",
			"details": "Variable containing the version number of the LuaJIT core (xx.yy.zz) in form of decimal number xxyyzz (<a href=\"https://luajit.org/ext_jit.html#jit_version_num\">Manual</a>)"
		},
		{
			"trigger": "jit.os",
			"annotation": "",
			"contents": "jit.os",
			"kind": "variable",
			"details": "Variable containing the target OS name (<a href=\"https://luajit.org/ext_jit.html#jit_os\">Manual</a>)"
		},
		{
			"trigger": "jit.arch",
			"annotation": "",
			"contents": "jit.arch",
			"kind": "variable",
			"details": "Variable containing the target architecture name (<a href=\"https://luajit.org/ext_jit.html#jit_arch\">Manual</a>)"
		},

		// FFI

		{
			"trigger": "ffi.cdef",
			"annotation": "(def)",
			"contents": "ffi.cdef(${1:def})",
			"kind": "function",
			"details": "Adds multiple C declarations for types or external symbols (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_cdef\">Manual</a>)"
		},
		{
			"trigger": "ffi.C",
			"annotation": "",
			"contents": "ffi.C",
			"kind": "variable",
			"details": "Default C library namespace (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_C\">Manual</a>)"
		},
		{
			"trigger": "ffi.load",
			"annotation": "(name [, global])",
			"contents": "ffi.load(${1:name}, ${2:global})",
			"kind": "function",
			"details": "Loads the dynamic library given by <code>name</code> and returns a new C library namespace which binds to its symbols (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_load\">Manual</a>)"
		},
		{
			"trigger": "ffi.new",
			"annotation": "(ct [, nelem] [, init...])",
			"contents": "ffi.new(${1:ct}, ${2:nelem}, ${3:init})",
			"kind": "function",
			"details": "Creates a cdata object for given <code>ct</code> (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_new\">Manual</a>)"
		},
		{
			"trigger": "ffi.typeof",
			"annotation": "(ct)",
			"contents": "ffi.typeof(${1:ct})",
			"kind": "function",
			"details": "Creates a ctype object for the given <code>ct</code> (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_typeof\">Manual</a>)"
		},
		{
			"trigger": "ffi.cast",
			"annotation": "(ct, init)",
			"contents": "ffi.cast(${1:ct}, ${2:init})",
			"kind": "function",
			"details": "Creates a scalar cdata object for the given <code>ct</code> initialized with <code>init</code> (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_cast\">Manual</a>)"
		},
		{
			"trigger": "ffi.metatype",
			"annotation": "(ct, metatable)",
			"contents": "ffi.metatype(${1:ct}, ${2:metatable})",
			"kind": "function",
			"details": "Creates a ctype object for the given <code>ct</code> and associates it with a <code>metatable</code> (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_metatype\">Manual</a>)"
		},
		{
			"trigger": "ffi.gc",
			"annotation": "(cdata, finalizer)",
			"contents": "ffi.gc(${1:cdata}, ${2:finalizer})",
			"kind": "function",
			"details": "Associates a <code>finalizer</code> with a pointer or aggregate <code>cdata</code> object (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_gc\">Manual</a>)"
		},
		{
			"trigger": "ffi.sizeof",
			"annotation": "(ct [, nelem])",
			"contents": "ffi.sizeof(${1:ct}, ${2:nelem})",
			"kind": "function",
			"details": "Returns the size of <code>ct</code> in bytes (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_sizeof\">Manual</a>)"
		},
		{
			"trigger": "ffi.alignof",
			"annotation": "(ct)",
			"contents": "ffi.alignof(${1:ct})",
			"kind": "function",
			"details": "Returns the minimum required alignment for <code>ct</code> in bytes (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_alignof\">Manual</a>)"
		},
		{
			"trigger": "ffi.offsetof",
			"annotation": "(ct, field)",
			"contents": "ffi.offsetof(${1:ct}, ${2:field})",
			"kind": "function",
			"details": "Returns the offset (in bytes) of <code>field</code> relative to the start of <code>ct</code>, which must be a <code>struct</code> (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_offsetof\">Manual</a>)"
		},
		{
			"trigger": "ffi.istype",
			"annotation": "(ct, obj)",
			"contents": "ffi.istype(${1:ct}, ${2:obj})",
			"kind": "function",
			"details": "Returns whatever <code>obj</code> has the C type given by <code>ct</code>, which must be a <code>struct</code> (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_istype\">Manual</a>)"
		},
		{
			"trigger": "ffi.errno",
			"annotation": "([newerr])",
			"contents": "ffi.errno(${1:newerr})",
			"kind": "function",
			"details": "Returns the error number set by the last C function call which indicated an error condition (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_errno\">Manual</a>)"
		},
		{
			"trigger": "ffi.string",
			"annotation": "(ptr [, len])",
			"contents": "ffi.string(${1:ptr}, ${2:len})",
			"kind": "function",
			"details": "Creates an interned Lua string from the data pointer by <code>ptr</code> (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_string\">Manual</a>)"
		},
		{
			"trigger": "ffi.copy",
			"annotation": "(dst, src, len)",
			"contents": "ffi.copy(${1:dst}, ${2:src}, ${3:len})",
			"kind": "function",
			"details": "Copies the data pointer to by <code>src</code> to <code>dst</code> with length of <code>len</code> bytes (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_copy\">Manual</a>)"
		},
		{
			"trigger": "ffi.copy",
			"annotation": "(dst, str)",
			"contents": "ffi.copy(${1:dst}, ${2:str})",
			"kind": "function",
			"details": "Copies the data pointer to by <code>str</code> to <code>dst</code> (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_copy\">Manual</a>)"
		},
		{
			"trigger": "ffi.fill",
			"annotation": "(dst, len [, c])",
			"contents": "ffi.fill(${1:dst}, ${2:len}, ${3:c})",
			"kind": "function",
			"details": "Fills the data pointed to by <code>dst</code> with <code>len</code> constant bytes, given by <code>c</code> (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_fill\">Manual</a>)"
		},
		{
			"trigger": "ffi.abi",
			"annotation": "(param)",
			"contents": "ffi.abi(${1:param})",
			"kind": "function",
			"details": "Returns whatever <code>param</code> (a Lua string) applies for the target ABI (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_abi\">Manual</a>)"
		},
		{
			"trigger": "ffi.os",
			"annotation": "",
			"contents": "ffi.os",
			"kind": "variable",
			"details": "Variable containing the target OS name (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_os\">Manual</a>)"
		},
		{
			"trigger": "ffi.arch",
			"annotation": "",
			"contents": "ffi.arch",
			"kind": "variable",
			"details": "Variable containing the target architecture name (<a href=\"https://luajit.org/ext_ffi_api.html#ffi_arch\">Manual</a>)"
		},


		// Bit library

		{
			"trigger": "bit.arshift",
			"annotation": "(x, n)",
			"contents": "bit.arshift(${1:x}, ${2:n})",
			"kind": "function",
			"details": "Returns bitwise arithmetic right shift (<a href=\"https://bitop.luajit.org/api.html#lshift\">Manual</a>)"
		},
		{
			"trigger": "bit.band",
			"annotation": "(...)",
			"contents": "bit.band(${1:...})",
			"kind": "function",
			"details": "Returns bitwise and (<a href=\"https://bitop.luajit.org/api.html#bor\">Manual</a>)"
		},
		{
			"trigger": "bit.bnot",
			"annotation": "(x)",
			"contents": "bit.bnot(${1:x})",
			"kind": "function",
			"details": "Returns bitwise not (<a href=\"https://bitop.luajit.org/api.html#bnot\">Manual</a>)"
		},
		{
			"trigger": "bit.bor",
			"annotation": "(...)",
			"contents": "bit.bor(${1:...})",
			"kind": "function",
			"details": "Returns bitwise or (<a href=\"https://bitop.luajit.org/api.html#bor\">Manual</a>)"
		},
		{
			"trigger": "bit.bswap",
			"annotation": "(x)",
			"contents": "bit.bswap(${1:x})",
			"kind": "function",
			"details": "Swaps the bytes of its arguemnts and returns it (<a href=\"https://bitop.luajit.org/api.html#bswap\">Manual</a>)"
		},
		{
			"trigger": "bit.bxor",
			"annotation": "(...)",
			"contents": "bit.bxor(${1:...})",
			"kind": "function",
			"details": "Returns bitwise xor (<a href=\"https://bitop.luajit.org/api.html#bor\">Manual</a>)"
		},
		{
			"trigger": "bit.rol",
			"annotation": "(x, n)",
			"contents": "bit.rol(${1:x}, ${2:n})",
			"kind": "function",
			"details": "Returns left rotation of <code>x</code> by <code>n</code> bits (<a href=\"https://bitop.luajit.org/api.html#rol\">Manual</a>)"
		},
		{
			"trigger": "bit.lshift",
			"annotation": "(x, n)",
			"contents": "bit.lshift(${1:x}, ${2:n})",
			"kind": "function",
			"details": "Returns logical left shift (<a href=\"https://bitop.luajit.org/api.html#lshift\">Manual</a>)"
		},
		{
			"trigger": "bit.ror",
			"annotation": "(x, n)",
			"contents": "bit.ror(${1:x}, ${2:n})",
			"kind": "function",
			"details": "Returns right rotation of <code>x</code> by <code>n</code> bits (<a href=\"https://bitop.luajit.org/api.html#rol\">Manual</a>)"
		},
		{
			"trigger": "bit.rshift",
			"annotation": "(x, n)",
			"contents": "bit.rshift(${1:x}, ${2:n})",
			"kind": "function",
			"details": "Returns logical right shift (<a href=\"https://bitop.luajit.org/api.html#lshift\">Manual</a>)"
		},
		{
			"trigger": "bit.tobit",
			"annotation": "(x)",
			"contents": "bit.tobit(${1:x})",
			"kind": "function",
			"details": "Normalizes a number to the numeric range for bit operations and returns it (<a href=\"https://bitop.luajit.org/api.html#tobit\">Manual</a>)"
		},
		{
			"trigger": "bit.tohex",
			"annotation": "(x, digits)",
			"contents": "bit.tohex(${1:x}, ${2:digits})",
			"kind": "function",
			"details": "Converts <code>x</code> to a hex string with <code>digits</code> digits (<a href=\"https://bitop.luajit.org/api.html#tohex\">Manual</a>)"
		},

		// ================
		// Löve2D functions
		// ================

		// love

		{
			"trigger": "love.getVersion",
			"annotation": "()",
			"contents": "${1:major}, ${2:minor}, ${3:revision}, ${4:codename} = love.getVersion()",
			"kind": "function",
			"details": "Gets the current running version of LÖVE (<a href=\"https://love2d.org/wiki/love.getVersion\">Manual</a>)"
		},
		{
			"trigger": "love.hasDeprecationOutput",
			"annotation": "()",
			"contents": "${1:enabled} = love.hasDeprecationOutput()",
			"kind": "function",
			"details": "Gets whether LÖVE displays warnings when using deprecated functionality (<a href=\"https://love2d.org/wiki/love.hasDeprecationOutput\">Manual</a>)"
		},
		{
			"trigger": "love.isVersionCompatible",
			"annotation": "(version)",
			"contents": "${1:compatible} = love.isVersionCompatible(${2:version})",
			"kind": "function",
			"details": "Gets whatever the version is compatible with current running version of LÖVE (<a href=\"https://love2d.org/wiki/love.isVersionCompatible\">Manual</a>)"
		},
		{
			"trigger": "love.isVersionCompatible",
			"annotation": "(major, minor, revision)",
			"contents": "${1:compatible} = love.isVersionCompatible(${2:major}, ${3:minor}, ${4:revision})",
			"kind": "function",
			"details": "Gets whatever the version is compatible with current running version of LÖVE (<a href=\"https://love2d.org/wiki/love.isVersionCompatible\">Manual</a>)"
		},
		{
			"trigger": "love.setDeprecationOutput",
			"annotation": "(enable)",
			"contents": "love.setDeprecationOutput(${1:enable})",
			"kind": "function",
			"details": "Sets whether LÖVE displays warnings when using deprecated functionality (<a href=\"https://love2d.org/wiki/love.setDeprecationOutput\">Manual</a>)"
		},

		// Variables

		{
			"trigger": "love._version_major",
			"annotation": "(enable)",
			"contents": "love._version_major",
			"kind": "variable",
			"details": "Major version of currently LÖVE"
		},
		{
			"trigger": "love._version_minor",
			"annotation": "(enable)",
			"contents": "love._version_minor",
			"kind": "variable",
			"details": "Minor version of currently LÖVE"
		},
		{
			"trigger": "love._version_revision",
			"annotation": "(enable)",
			"contents": "love._version_revision",
			"kind": "variable",
			"details": "Revision version of currently LÖVE"
		},

		// Callbacks

		{
			"trigger": "love.displayrotated",
			"annotation": "(index, orientation)",
			"contents": "love.displayrotated(${1:index}, ${2:orientation})",
			"kind": ["function", "c", "Callback"],
			"details": "Called when the device display orientation changed (<a href=\"https://love2d.org/wiki/love.displayrotated\">Manual</a>)"
		},
		{
			"trigger": "love.draw",
			"annotation": "()",
			"contents": "love.draw()",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function used to draw on the screen every frame (<a href=\"https://love2d.org/wiki/love.draw\">Manual</a>)"
		},
		{
			"trigger": "love.errorhandler",
			"annotation": "(msg)",
			"contents": "love.errorhandler(${1:msg})",
			"kind": ["function", "c", "Callback"],
			"details": "The error handler, used to display error messages (<a href=\"https://love2d.org/wiki/love.errorhandler\">Manual</a>)"
		},
		{
			"trigger": "love.load",
			"annotation": "(arg, unfilteredArg)",
			"contents": "love.load(${1:msg}, ${2:unfilteredArg})",
			"kind": ["function", "c", "Callback"],
			"details": "This function is called exactly once at the beginning of the game (<a href=\"https://love2d.org/wiki/love.load\">Manual</a>)"
		},
		{
			"trigger": "love.lowmemory",
			"annotation": "()",
			"contents": "love.lowmemory()",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when the system is running out of memory on mobile devices (<a href=\"https://love2d.org/wiki/love.lowmemory\">Manual</a>)"
		},
		{
			"trigger": "love.quit",
			"annotation": "()",
			"contents": "love.quit()",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when the game is closed (<a href=\"https://love2d.org/wiki/love.quit\">Manual</a>)"
		},
		{
			"trigger": "love.run",
			"annotation": "()",
			"contents": "love.run()",
			"kind": ["function", "c", "Callback"],
			"details": "The main function, containing the main loop. A sensible default is used when left out (<a href=\"https://love2d.org/wiki/love.run\">Manual</a>)"
		},
		{
			"trigger": "love.threaderror",
			"annotation": "(thread, errorstr)",
			"contents": "love.threaderror(${1:thread}, ${2:errorstr})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when a Thread encounters an error (<a href=\"https://love2d.org/wiki/love.threaderror\">Manual</a>)"
		},
		{
			"trigger": "love.update",
			"annotation": "(dt)",
			"contents": "love.update(${1:dt})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function used to update the state of the game every frame (<a href=\"https://love2d.org/wiki/love.update\">Manual</a>)"
		},
		{
			"trigger": "love.directorydropped",
			"annotation": "(path)",
			"contents": "love.directorydropped(${1:path})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when a directory is dragged and dropped onto the window (<a href=\"https://love2d.org/wiki/love.directorydropped\">Manual</a>)"
		},
		{
			"trigger": "love.filedropped",
			"annotation": "(file)",
			"contents": "love.filedropped(${1:file})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when a file is dragged and dropped onto the window (<a href=\"https://love2d.org/wiki/love.filedropped\">Manual</a>)"
		},
		{
			"trigger": "love.focus",
			"annotation": "(focus)",
			"contents": "love.focus(${1:focus})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when window receives or loses focus (<a href=\"https://love2d.org/wiki/love.focus\">Manual</a>)"
		},
		{
			"trigger": "love.mousefocus",
			"annotation": "(focus)",
			"contents": "love.mousefocus(${1:focus})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when window receives or loses mouse focus (<a href=\"https://love2d.org/wiki/love.mousefocus\">Manual</a>)"
		},
		{
			"trigger": "love.resize",
			"annotation": "(w, h)",
			"contents": "love.resize(${1:w}, ${2:h})",
			"kind": ["function", "c", "Callback"],
			"details": "Called when the window is resized (<a href=\"https://love2d.org/wiki/love.resize\">Manual</a>)"
		},
		{
			"trigger": "love.visible",
			"annotation": "(visible)",
			"contents": "love.visible(${1:visible})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when window is shown or hidden (<a href=\"https://love2d.org/wiki/love.visible\">Manual</a>)"
		},
		{
			"trigger": "love.keypressed",
			"annotation": "(key, scancode, isrepeat)",
			"contents": "love.keypressed(${1:key}, ${2:scancode}, ${3:isrepeat})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when a key is pressed (<a href=\"https://love2d.org/wiki/love.keypressed\">Manual</a>)"
		},
		{
			"trigger": "love.keyreleased",
			"annotation": "(key, scancode)",
			"contents": "love.keyreleased(${1:key}, ${2:scancode})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when a keyboard key is released (<a href=\"https://love2d.org/wiki/love.keyreleased\">Manual</a>)"
		},
		{
			"trigger": "love.textedited",
			"annotation": "(text, start, length)",
			"contents": "love.textedited(${1:text}, ${2:start}, ${3:length})",
			"kind": ["function", "c", "Callback"],
			"details": "Called when the candidate text for an IME has changed (<a href=\"https://love2d.org/wiki/love.textedited\">Manual</a>)"
		},
		{
			"trigger": "love.textinput",
			"annotation": "(text)",
			"contents": "love.textinput(${1:text})",
			"kind": ["function", "c", "Callback"],
			"details": "Called when text has been entered by the user (<a href=\"https://love2d.org/wiki/love.textinput\">Manual</a>)"
		},
		{
			"trigger": "love.mousemoved",
			"annotation": "(x, y, dx, dy, istouch)",
			"contents": "love.mousemoved(${1:x}, ${2:y}, ${3:dx}, ${4:dy}, ${5:istouch})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when the mouse is moved (<a href=\"https://love2d.org/wiki/love.mousemoved\">Manual</a>)"
		},
		{
			"trigger": "love.mousepressed",
			"annotation": "(x, y, button, istouch, presses)",
			"contents": "love.mousepressed(${1:x}, ${2:y}, ${3:button}, ${4:istouch}, ${5:presses})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when a mouse button is pressed (<a href=\"https://love2d.org/wiki/love.mousepressed\">Manual</a>)"
		},
		{
			"trigger": "love.mousereleased",
			"annotation": "(x, y, button, istouch, presses)",
			"contents": "love.mousereleased(${1:x}, ${2:y}, ${3:button}, ${4:istouch}, ${5:presses})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when a mouse button is released (<a href=\"https://love2d.org/wiki/love.mousereleased\">Manual</a>)"
		},
		{
			"trigger": "love.wheelmoved",
			"annotation": "(x, y)",
			"contents": "love.wheelmoved(${1:x}, ${2:y})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when the mouse wheel is moved (<a href=\"https://love2d.org/wiki/love.wheelmoved\">Manual</a>)"
		},
		{
			"trigger": "love.gamepadaxis",
			"annotation": "(joystick, axis, value)",
			"contents": "love.gamepadaxis(${1:joystick}, ${2:axis}, ${3:value})",
			"kind": ["function", "c", "Callback"],
			"details": "Called when a Joystick's virtual gamepad axis is moved (<a href=\"https://love2d.org/wiki/love.gamepadaxis\">Manual</a>)"
		},
		{
			"trigger": "love.gamepadpressed",
			"annotation": "(joystick, button)",
			"contents": "love.gamepadpressed(${1:joystick}, ${2:button})",
			"kind": ["function", "c", "Callback"],
			"details": "Called when a Joystick's virtual gamepad button is pressed (<a href=\"https://love2d.org/wiki/love.gamepadpressed\">Manual</a>)"
		},
		{
			"trigger": "love.gamepadreleased",
			"annotation": "(joystick, button)",
			"contents": "love.gamepadreleased(${1:joystick}, ${2:button})",
			"kind": ["function", "c", "Callback"],
			"details": "Called when a Joystick's virtual gamepad button is released (<a href=\"https://love2d.org/wiki/love.gamepadreleased\">Manual</a>)"
		},
		{
			"trigger": "love.joystickadded",
			"annotation": "(joystick)",
			"contents": "love.joystickadded(${1:joystick})",
			"kind": ["function", "c", "Callback"],
			"details": "Called when a Joystick is connected (<a href=\"https://love2d.org/wiki/love.joystickadded\">Manual</a>)"
		},
		{
			"trigger": "love.joystickaxis",
			"annotation": "(joystick, axis, value)",
			"contents": "love.joystickaxis(${1:joystick}, ${2:axis}, ${3:value})",
			"kind": ["function", "c", "Callback"],
			"details": "Called when a joystick axis moves (<a href=\"https://love2d.org/wiki/love.joystickaxis\">Manual</a>)"
		},
		{
			"trigger": "love.joystickhat",
			"annotation": "(joystick, hat, direction)",
			"contents": "love.joystickhat(${1:joystick}, ${2:hat}, ${3:direction})",
			"kind": ["function", "c", "Callback"],
			"details": "Called when a joystick hat direction changes (<a href=\"https://love2d.org/wiki/love.joystickhat\">Manual</a>)"
		},
		{
			"trigger": "love.joystickpressed",
			"annotation": "(joystick, button)",
			"contents": "love.joystickpressed(${1:joystick}, ${2:button})",
			"kind": ["function", "c", "Callback"],
			"details": "Called when a joystick button is pressed (<a href=\"https://love2d.org/wiki/love.joystickpressed\">Manual</a>)"
		},
		{
			"trigger": "love.joystickreleased",
			"annotation": "(joystick, button)",
			"contents": "love.joystickreleased(${1:joystick}, ${2:button})",
			"kind": ["function", "c", "Callback"],
			"details": "Called when a joystick button is released (<a href=\"https://love2d.org/wiki/love.joystickreleased\">Manual</a>)"
		},
		{
			"trigger": "love.joystickremoved",
			"annotation": "(joystick)",
			"contents": "love.joystickremoved(${1:joystick})",
			"kind": ["function", "c", "Callback"],
			"details": "Called when a Joystick is disconnected (<a href=\"https://love2d.org/wiki/love.joystickremoved\">Manual</a>)"
		},
		{
			"trigger": "love.touchmoved",
			"annotation": "(id, x, y, dx, dy, pressure)",
			"contents": "love.touchmoved(${1:id}, ${2:x}, ${3:y}, ${4:dx}, ${5:dy}, ${6:pressure})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when a touch press moves inside the touch screen (<a href=\"https://love2d.org/wiki/love.touchmoved\">Manual</a>)"
		},
		{
			"trigger": "love.touchpressed",
			"annotation": "(id, x, y, dx, dy, pressure)",
			"contents": "love.touchpressed(${1:id}, ${2:x}, ${3:y}, ${4:dx}, ${5:dy}, ${6:pressure})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when the touch screen is touched (<a href=\"https://love2d.org/wiki/love.touchpressed\">Manual</a>)"
		},
		{
			"trigger": "love.touchreleased",
			"annotation": "(id, x, y, dx, dy, pressure)",
			"contents": "love.touchreleased(${1:id}, ${2:x}, ${3:y}, ${4:dx}, ${5:dy}, ${6:pressure})",
			"kind": ["function", "c", "Callback"],
			"details": "Callback function triggered when the touch screen stops being touched (<a href=\"https://love2d.org/wiki/love.touchreleased\">Manual</a>)"
		},

		// love.audio

		{
			"trigger": "love.audio.getActiveEffects",
			"annotation": "()",
			"contents": "${1:effects} = love.audio.getActiveEffects()",
			"kind": "function",
			"details": "Gets a list of the names of the currently enabled effects (<a href=\"https://love2d.org/wiki/love.audio.getActiveEffects\">Manual</a>)"
		},
		{
			"trigger": "love.audio.getActiveSourceCount",
			"annotation": "()",
			"contents": "${1:count} = love.audio.getActiveSourceCount()",
			"kind": "function",
			"details": "Gets the current number of simultaneously playing sources (<a href=\"https://love2d.org/wiki/love.audio.getActiveSourceCount\">Manual</a>)"
		},
		{
			"trigger": "love.audio.getDistanceModel",
			"annotation": "()",
			"contents": "${1:model} = love.audio.getDistanceModel()",
			"kind": "function",
			"details": "Returns the distance attenuation model (<a href=\"https://love2d.org/wiki/love.audio.getDistanceModel\">Manual</a>)"
		},
		{
			"trigger": "love.audio.getDopplerScale",
			"annotation": "()",
			"contents": "${1:scale} = love.audio.getDopplerScale()",
			"kind": "function",
			"details": "Gets the global scale factor for doppler effects (<a href=\"https://love2d.org/wiki/love.audio.getDopplerScale\">Manual</a>)"
		},
		{
			"trigger": "love.audio.getEffect",
			"annotation": "(name)",
			"contents": "${1:settings} = love.audio.getEffect(${2:name})",
			"kind": "function",
			"details": "Gets the settings associated with an effect (<a href=\"https://love2d.org/wiki/love.audio.getEffect\">Manual</a>)"
		},
		{
			"trigger": "love.audio.getMaxSceneEffects",
			"annotation": "()",
			"contents": "${1:maximum} = love.audio.getMaxSceneEffects()",
			"kind": "function",
			"details": "Gets the maximum number of active effects (<a href=\"https://love2d.org/wiki/love.audio.getMaxSceneEffects\">Manual</a>)"
		},
		{
			"trigger": "love.audio.getMaxSourceEffects",
			"annotation": "()",
			"contents": "${1:maximum} = love.audio.getMaxSourceEffects()",
			"kind": "function",
			"details": "Gets the maximum number of active Effects for each Source (<a href=\"https://love2d.org/wiki/love.audio.getMaxSourceEffects\">Manual</a>)"
		},
		{
			"trigger": "love.audio.getOrientation",
			"annotation": "()",
			"contents": "${1:fx}, ${2:fy}, ${3:fz}, ${4:ux}, ${5:uy}, ${6:uz} = love.audio.getOrientation()",
			"kind": "function",
			"details": "Returns the orientation of the listener (<a href=\"https://love2d.org/wiki/love.audio.getOrientation\">Manual</a>)"
		},
		{
			"trigger": "love.audio.getPosition",
			"annotation": "()",
			"contents": "${1:x}, ${2:y}, ${3:z} = love.audio.getPosition()",
			"kind": "function",
			"details": "Returns the position of the listener (<a href=\"https://love2d.org/wiki/love.audio.getPosition\">Manual</a>)"
		},
		{
			"trigger": "love.audio.getRecordingDevices",
			"annotation": "()",
			"contents": "${1:devices} = love.audio.getRecordingDevices()",
			"kind": "function",
			"details": "Gets a list of RecordingDevices on the system (<a href=\"https://love2d.org/wiki/love.audio.getRecordingDevices\">Manual</a>)"
		},
		{
			"trigger": "love.audio.getSourceCount",
			"annotation": "",
			"contents": "${1:numSources} = love.audio.getSourceCount()",
			"kind": "function",
			"details": "<b>Deprecated</b> Use love.audio.getActiveSourceCount instead (<a href=\"https://love2d.org/wiki/love.audio.getSourceCount\">Manual</a>)"
		},
		{
			"trigger": "love.audio.getVelocity",
			"annotation": "()",
			"contents": "${1:x}, ${2:y}, ${3:z} = love.audio.getVelocity()",
			"kind": "function",
			"details": "Returns the velocity of the listener (<a href=\"https://love2d.org/wiki/love.audio.getVelocity\">Manual</a>)"
		},
		{
			"trigger": "love.audio.getVolume",
			"annotation": "()",
			"contents": "${1:volume} = love.audio.getVolume()",
			"kind": "function",
			"details": "Returns the master volume (<a href=\"https://love2d.org/wiki/love.audio.getVolume\">Manual</a>)"
		},
		{
			"trigger": "love.audio.isEffectsSupported",
			"annotation": "()",
			"contents": "${1:supported} = love.audio.isEffectsSupported()",
			"kind": "function",
			"details": "Gets whether Effects are supported in the system (<a href=\"https://love2d.org/wiki/love.audio.isEffectsSupported\">Manual</a>)"
		},
		{
			"trigger": "love.audio.newQueueableSource",
			"annotation": "(samplerate, bitdepth, channels [, buffercount])",
			"contents": "${1:source} = love.audio.newQueueableSource(${2:samplerate}, ${3:bitdepth}, ${4:channels}, ${5:buffercount})",
			"kind": "function",
			"details": "Creates a new Source usable for real-time generated sound playback with Source:queue (<a href=\"https://love2d.org/wiki/love.audio.newQueueableSource\">Manual</a>)"
		},
		{
			"trigger": "love.audio.newSource",
			"annotation": "(filename, type)",
			"contents": "${1:source} = love.audio.newSource(${2:filename}, ${3:type})",
			"kind": "function",
			"details": "Creates a new Source from a filename (<a href=\"https://love2d.org/wiki/love.audio.newSource\">Manual</a>)"
		},
		{
			"trigger": "love.audio.newSource",
			"annotation": "(file, type)",
			"contents": "${1:source} = love.audio.newSource(${2:file}, ${3:type})",
			"kind": "function",
			"details": "Creates a new Source from a file (<a href=\"https://love2d.org/wiki/love.audio.newSource\">Manual</a>)"
		},
		{
			"trigger": "love.audio.newSource",
			"annotation": "(decoder, type)",
			"contents": "${1:source} = love.audio.newSource(${2:decoder}, ${3:type})",
			"kind": "function",
			"details": "Creates a new Source from Decoder (<a href=\"https://love2d.org/wiki/love.audio.newSource\">Manual</a>)"
		},
		{
			"trigger": "love.audio.newSource",
			"annotation": "(data [, type])",
			"contents": "${1:source} = love.audio.newSource(${2:data}, ${3:type})",
			"kind": "function",
			"details": "Creates a new Source from a SoundData (<a href=\"https://love2d.org/wiki/love.audio.newSource\">Manual</a>)"
		},
		{
			"trigger": "love.audio.pause",
			"annotation": "()",
			"contents": "${1:pausedSources} = love.audio.pause()",
			"kind": "function",
			"details": "Pauses all currently played Sources (<a href=\"https://love2d.org/wiki/love.audio.pause\">Manual</a>)"
		},
		{
			"trigger": "love.audio.pause",
			"annotation": "(source [, ...])",
			"contents": "love.audio.pause(${1:source}, {2:...})",
			"kind": "function",
			"details": "Pauses specific played Sources (<a href=\"https://love2d.org/wiki/love.audio.pause\">Manual</a>)"
		},
		{
			"trigger": "love.audio.pause",
			"annotation": "(sources)",
			"contents": "love.audio.pause(${1:sources})",
			"kind": "function",
			"details": "Pauses specific played Sources given in table (<a href=\"https://love2d.org/wiki/love.audio.pause\">Manual</a>)"
		},
		{
			"trigger": "love.audio.play",
			"annotation": "(source)",
			"contents": "love.audio.play(${1:source})",
			"kind": "function",
			"details": "Plays specified Sources (<a href=\"https://love2d.org/wiki/love.audio.play\">Manual</a>)"
		},
		{
			"trigger": "love.audio.play",
			"annotation": "(sources)",
			"contents": "love.audio.play(${1:sources})",
			"kind": "function",
			"details": "Plays specific Sources given by table (<a href=\"https://love2d.org/wiki/love.audio.play\">Manual</a>)"
		},
		{
			"trigger": "love.audio.play",
			"annotation": "(source [, ...])",
			"contents": "love.audio.play(${1:source}, ${2:...})",
			"kind": "function",
			"details": "Plays specific Sources (<a href=\"https://love2d.org/wiki/love.audio.play\">Manual</a>)"
		},
		{
			"trigger": "love.audio.setDistanceModel",
			"annotation": "(model)",
			"contents": "love.audio.setDistanceModel(${1:model})",
			"kind": "function",
			"details": "Sets the distance attenuation model (<a href=\"https://love2d.org/wiki/love.audio.setDistanceModel\">Manual</a>)"
		},
		{
			"trigger": "love.audio.setDopplerScale",
			"annotation": "(scale)",
			"contents": "love.audio.setDopplerScale(${1:scale})",
			"kind": "function",
			"details": "Sets a global scale factor for doppler effects (<a href=\"https://love2d.org/wiki/love.audio.setDopplerScale\">Manual</a>)"
		},
		{
			"trigger": "love.audio.setEffect",
			"annotation": "(name, settings)",
			"contents": "${1:success} = love.audio.setEffect(${2:name}, ${3:settings})",
			"kind": "function",
			"details": "Defines an effect that can be applied to a Source (<a href=\"https://love2d.org/wiki/love.audio.setEffect\">Manual</a>)"
		},
		{
			"trigger": "love.audio.setEffect",
			"annotation": "(name [, enabled])",
			"contents": "${1:success} = love.audio.setEffect(${2:name}, ${3:enabled})",
			"kind": "function",
			"details": "Enables / disables the effect (<a href=\"https://love2d.org/wiki/love.audio.setEffect\">Manual</a>)"
		},
		{
			"trigger": "love.audio.setMixWithSystem",
			"annotation": "(mix)",
			"contents": "${1:success} = love.audio.setMixWithSystem(${2:mix})",
			"kind": "function",
			"details": "Sets whether the system should mix the audio with the system's audio (<a href=\"https://love2d.org/wiki/love.audio.setMixWithSystem\">Manual</a>)"
		},
		{
			"trigger": "love.audio.setOrientation",
			"annotation": "(fx, fy, fz, ux, uy, uz)",
			"contents": "love.audio.setOrientation(${1:fx}, ${2:fy}, ${3:fz}, ${4:ux}, ${5:uy}, ${6:uz})",
			"kind": "function",
			"details": "Sets the orientation of the listener (<a href=\"https://love2d.org/wiki/love.audio.setOrientation\">Manual</a>)"
		},
		{
			"trigger": "love.audio.setPosition",
			"annotation": "(x, y, z)",
			"contents": "love.audio.setPosition(${1:x}, ${2:y}, ${3:z})",
			"kind": "function",
			"details": "Sets the position of the listener (<a href=\"https://love2d.org/wiki/love.audio.setPosition\">Manual</a>)"
		},
		{
			"trigger": "love.audio.setVelocity",
			"annotation": "(x, y, z)",
			"contents": "love.audio.setVelocity(${1:x}, ${2:y}, ${3:z})",
			"kind": "function",
			"details": "Sets the velocity of the listener (<a href=\"https://love2d.org/wiki/love.audio.setVelocity\">Manual</a>)"
		},
		{
			"trigger": "love.audio.setVolume",
			"annotation": "(volume)",
			"contents": "love.audio.setVolume(${1:volume})",
			"kind": "function",
			"details": "Sets the master volume (<a href=\"https://love2d.org/wiki/love.audio.setVolume\">Manual</a>)"
		},
		{
			"trigger": "love.audio.stop",
			"annotation": "()",
			"contents": "${1:stoppedSources} = love.audio.stop()",
			"kind": "function",
			"details": "Stops all currently played Sources (<a href=\"https://love2d.org/wiki/love.audio.stop\">Manual</a>)"
		},
		{
			"trigger": "love.audio.stop",
			"annotation": "(source [, ...])",
			"contents": "love.audio.stop(${1:source}, {2:...})",
			"kind": "function",
			"details": "Stops specific played Sources (<a href=\"https://love2d.org/wiki/love.audio.stop\">Manual</a>)"
		},
		{
			"trigger": "love.audio.stop",
			"annotation": "(sources)",
			"contents": "love.audio.stop(${1:sources})",
			"kind": "function",
			"details": "Stops specific played Sources given in table (<a href=\"https://love2d.org/wiki/love.audio.stop\">Manual</a>)"
		},

		// love.data



		// love.event

		{
			"trigger": "love.event.clear",
			"annotation": "",
			"contents": "love.event.clear()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.event.clear\">Manual</a>)"
		},
		{
			"trigger": "love.event.poll",
			"annotation": "",
			"contents": "${1:i} = love.event.poll()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.event.poll\">Manual</a>)"
		},
		{
			"trigger": "love.event.pump",
			"annotation": "",
			"contents": "love.event.pump()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.event.pump\">Manual</a>)"
		},
		{
			"trigger": "love.event.push",
			"annotation": "",
			"contents": "love.event.push(${1:e}, ${2:a}, ${3:b}, ${4:c}, ${5:d})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.event.push\">Manual</a>)"
		},
		{
			"trigger": "love.event.quit",
			"annotation": "",
			"contents": "love.event.quit()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.event.quit\">Manual</a>)"
		},
		{
			"trigger": "love.event.wait",
			"annotation": "",
			"contents": "${1:e}, ${2:a}, ${3:b}, ${4:c}, ${5:d} = love.event.wait()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.event.wait\">Manual</a>)"
		},

		// love.filesystem

		{
			"trigger": "love.filesystem.append",
			"annotation": "",
			"contents": "${1:success}, ${2:errormsg} = love.filesystem.append(${3:name}, ${4:data}, ${5:size})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.append\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.createDirectory",
			"annotation": "",
			"contents": "${1:ok} = love.filesystem.createDirectory(${2:name})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.createDirectory\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.exists",
			"annotation": "",
			"contents": "${1:e} = love.filesystem.exists(${2:filename})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.exists\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.getAppdataDirectory",
			"annotation": "",
			"contents": "${1:path} = love.filesystem.getAppdataDirectory()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.getAppdataDirectory\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.getDirectoryItems",
			"annotation": "",
			"contents": "${1:items} = love.filesystem.getDirectoryItems(${2:dir})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.getDirectoryItems\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.getIdentity",
			"annotation": "",
			"contents": "love.filesystem.getIdentity(${1:name})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.getIdentity\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.getLastModified",
			"annotation": "",
			"contents": "${1:modtime}, ${2:errormsg} = love.filesystem.getLastModified(${3:filename})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.getLastModified\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.getSaveDirectory",
			"annotation": "",
			"contents": "${1:path} = love.filesystem.getSaveDirectory()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.getSaveDirectory\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.getSize",
			"annotation": "",
			"contents": "${1:size}, ${2:errormsg} = love.filesystem.getSize(${3:filename})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.getSize\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.getUserDirectory",
			"annotation": "",
			"contents": "${1:path} = love.filesystem.getUserDirectory()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.getUserDirectory\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.getWorkingDirectory",
			"annotation": "",
			"contents": "${1:path} = love.filesystem.getWorkingDirectory()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.getWorkingDirectory\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.isDirectory",
			"annotation": "",
			"contents": "${1:is_dir} = love.filesystem.isDirectory(${2:path})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.isDirectory\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.isFile",
			"annotation": "",
			"contents": "${1:is_file} = love.filesystem.isFile(${2:path})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.isFile\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.isFused",
			"annotation": "",
			"contents": "${1:fused} = love.filesystem.isFused()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.isFused\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.lines",
			"annotation": "",
			"contents": "${1:iterator} = love.filesystem.lines(${2:name})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.lines\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.load",
			"annotation": "",
			"contents": "${1:chunk} = love.filesystem.load(${2:name})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.load\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.newFile",
			"annotation": "",
			"contents": "${1:file}, ${2:errorstr} = love.filesystem.newFile(${3:filename}, ${4:mode})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.newFile\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.newFileData",
			"annotation": "",
			"contents": "${1:data} = love.filesystem.newFileData(${2:contents}, ${3:name}, ${4:decoder})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.newFileData\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.read",
			"annotation": "",
			"contents": "${1:contents}, ${2:size} = love.filesystem.read(${3:name}, ${4:bytes})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.read\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.remove",
			"annotation": "",
			"contents": "${1:ok} = love.filesystem.remove(${2:name})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.remove\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.setIdentity",
			"annotation": "",
			"contents": "love.filesystem.setIdentity(${1:name}, ${2:searchorder})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.setIdentity\">Manual</a>)"
		},
		{
			"trigger": "love.filesystem.write",
			"annotation": "",
			"contents": "${1:success} = love.filesystem.write(${2:name}, ${3:data}, ${4:size})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.filesystem.write\">Manual</a>)"
		},

		// love.font



		// love.graphics

		{
			"trigger": "love.graphics.arc",
			"annotation": "",
			"contents": "love.graphics.arc(${1:mode}, ${2:x}, ${3:y}, ${4:radius}, ${5:angle1}, ${6:angle2}, ${7:segments})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.arc\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.circle",
			"annotation": "",
			"contents": "love.graphics.circle(${1:mode}, ${2:x}, ${3:y}, ${4:radius}, ${5:segments})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.circle\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.clear",
			"annotation": "",
			"contents": "love.graphics.clear()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.clear\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.draw",
			"annotation": "",
			"contents": "love.graphics.draw(${1:drawable}, ${2:x}, ${3:y}, ${4:r}, ${5:sx}, ${6:sy}, ${7:ox}, ${8:oy}, ${9:kx}, ${10:ky})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.draw\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getBackgroundColor",
			"annotation": "",
			"contents": "${1:r}, ${2:g}, ${3:b}, ${4:a} = love.graphics.getBackgroundColor()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getBackgroundColor\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getBlendMode",
			"annotation": "",
			"contents": "${1:mode} = love.graphics.getBlendMode()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getBlendMode\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getCanvas",
			"annotation": "",
			"contents": "${1:canvas} = love.graphics.getCanvas()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getCanvas\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getColor",
			"annotation": "",
			"contents": "${1:r}, ${2:g}, ${3:b}, ${4:a} = love.graphics.getColor()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getColor\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getColorMask",
			"annotation": "",
			"contents": "${1:r}, ${2:g}, ${3:b}, ${4:a} = love.graphics.getColorMask()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getColorMask\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getDefaultFilter",
			"annotation": "",
			"contents": "${1:min}, ${2:mag}, ${3:anisotropy} = love.graphics.getDefaultFilter()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getDefaultFilter\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getDimensions",
			"annotation": "",
			"contents": "${1:width}, ${2:height} = love.graphics.getDimensions()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getDimensions\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getFSAA",
			"annotation": "",
			"contents": "${1:samples} = love.graphics.getFSAA()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getFSAA\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getFont",
			"annotation": "",
			"contents": "${1:font} = love.graphics.getFont()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getFont\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getHeight",
			"annotation": "",
			"contents": "${1:height} = love.graphics.getHeight()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getHeight\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getLineJoin",
			"annotation": "",
			"contents": "${1:join} = love.graphics.getLineJoin()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getLineJoin\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getLineStyle",
			"annotation": "",
			"contents": "${1:style} = love.graphics.getLineStyle()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getLineStyle\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getLineWidth",
			"annotation": "",
			"contents": "${1:width} = love.graphics.getLineWidth()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getLineWidth\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getFullscreenModes",
			"annotation": "",
			"contents": "${1:modes} = love.graphics.getFullscreenModes()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getFullscreenModes\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getShader",
			"annotation": "",
			"contents": "${1:shader} = love.graphics.getShader()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getShader\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getSystemLimit",
			"annotation": "",
			"contents": "${1:limit} = love.graphics.getSystemLimit(${2:limittype})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getSystemLimit\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getPointSize",
			"annotation": "",
			"contents": "${1:size} = love.graphics.getPointSize()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getPointSize\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getPointStyle",
			"annotation": "",
			"contents": "${1:style} = love.graphics.getPointStyle()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getPointStyle\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getRendererInfo",
			"annotation": "",
			"contents": "${1:name}, ${2:version}, ${3:vendor}, ${4:device} = love.graphics.getRendererInfo()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getRendererInfo\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getScissor",
			"annotation": "",
			"contents": "${1:x}, ${2:y}, ${3:width}, ${4:height} = love.graphics.getScissor()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getScissor\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.getWidth",
			"annotation": "",
			"contents": "${1:width} = love.graphics.getWidth()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.getWidth\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.isSupported",
			"annotation": "",
			"contents": "${1:isSupported} = love.graphics.isSupported(${2:supportN})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.isSupported\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.isWireframe",
			"annotation": "",
			"contents": "${1:wireframe} = love.graphics.isWireframe()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.isWireframe\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.line",
			"annotation": "",
			"contents": "love.graphics.line(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:...})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.line\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.newCanvas",
			"annotation": "",
			"contents": "${1:canvas} = love.graphics.newCanvas(${2:width}, ${3:height}, ${4:texture_type}, ${5:fsaa})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.newCanvas\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.newFont",
			"annotation": "",
			"contents": "${1:font} = love.graphics.newFont(${2:filename}, ${3:size})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.newFont\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.newMesh",
			"annotation": "",
			"contents": "${1:mesh} = love.graphics.newMesh(${2:vertices}, ${3:texture}, ${4:mode})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.newMesh\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.newImage",
			"annotation": "",
			"contents": "${1:image} = love.graphics.newImage(${2:filename}, ${3:format})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.newImage\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.newImageFont",
			"annotation": "",
			"contents": "${1:font} = love.graphics.newImageFont(${2:filename}, ${3:glyphs})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.newImageFont\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.newParticleSystem",
			"annotation": "",
			"contents": "${1:system} = love.graphics.newParticleSystem(${2:texture}, ${3:buffer})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.newParticleSystem\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.newShader",
			"annotation": "",
			"contents": "${1:shader} = love.graphics.newShader(${2:code})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.newShader\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.newQuad",
			"annotation": "",
			"contents": "${1:quad} = love.graphics.newQuad(${2:x}, ${3:y}, ${4:width}, ${5:height}, ${6:sw}, ${7:sh})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.newQuad\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.newScreenshot",
			"annotation": "",
			"contents": "${1:screenshot} = love.graphics.newScreenshot()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.newScreenshot\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.newSpriteBatch",
			"annotation": "",
			"contents": "${1:spriteBatch} = love.graphics.newSpriteBatch(${2:texture}, ${3:size}, ${4:usage})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.newSpriteBatch\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.origin",
			"annotation": "",
			"contents": "love.graphics.origin()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.origin\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.point",
			"annotation": "",
			"contents": "love.graphics.point(${1:x}, ${2:y})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.point\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.polygon",
			"annotation": "",
			"contents": "love.graphics.polygon(${1:mode}, ${2:...})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.polygon\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.pop",
			"annotation": "",
			"contents": "love.graphics.pop()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.pop\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.present",
			"annotation": "",
			"contents": "love.graphics.present()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.present\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.print",
			"annotation": "",
			"contents": "love.graphics.print(${1:text}, ${2:x}, ${3:y}, ${4:r}, ${5:sx}, ${6:sy}, ${7:ox}, ${8:oy}, ${9:kx}, ${10:ky})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.print\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.printf",
			"annotation": "",
			"contents": "love.graphics.printf(${1:text}, ${2:x}, ${3:y}, ${4:limit}, ${5:align}, ${6:r}, ${7:sx}, ${8:sy}, ${9:ox}, ${10:oy}, ${11:kx}, ${12:ky})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.printf\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.push",
			"annotation": "",
			"contents": "love.graphics.push()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.push\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.rectangle",
			"annotation": "",
			"contents": "love.graphics.rectangle(${1:mode}, ${2:x}, ${3:y}, ${4:width}, ${5:height})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.rectangle\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.reset",
			"annotation": "",
			"contents": "love.graphics.reset()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.reset\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.rotate",
			"annotation": "",
			"contents": "love.graphics.rotate(${1:angle})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.rotate\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.scale",
			"annotation": "",
			"contents": "love.graphics.scale(${1:sx}, ${2:sy})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.scale\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setBackgroundColor",
			"annotation": "",
			"contents": "love.graphics.setBackgroundColor(${1:r}, ${2:g}, ${3:b}, ${4:a})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setBackgroundColor\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setBlendMode",
			"annotation": "",
			"contents": "love.graphics.setBlendMode(${1:mode})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setBlendMode\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setCanvas",
			"annotation": "",
			"contents": "love.graphics.setCanvas()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setCanvas\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setColor",
			"annotation": "",
			"contents": "love.graphics.setColor(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setColor\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setColorMask",
			"annotation": "",
			"contents": "love.graphics.setColorMask()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setColorMask\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setDefaultFilter",
			"annotation": "",
			"contents": "love.graphics.setDefaultFilter(${1:min}, ${2:mag}, ${3:anisotropy})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setDefaultFilter\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setFont",
			"annotation": "",
			"contents": "love.graphics.setFont(${1:font})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setFont\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setInvertedStencil",
			"annotation": "",
			"contents": "love.graphics.setInvertedStencil()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setInvertedStencil\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setLineJoin",
			"annotation": "",
			"contents": "love.graphics.setLineJoin(${1:join})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setLineJoin\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setLineStyle",
			"annotation": "",
			"contents": "love.graphics.setLineStyle(${1:style})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setLineStyle\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setLineWidth",
			"annotation": "",
			"contents": "love.graphics.setLineWidth(${1:width})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setLineWidth\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setNewFont",
			"annotation": "",
			"contents": "${1:font} = love.graphics.setNewFont(${2:size})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setNewFont\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setShader",
			"annotation": "",
			"contents": "love.graphics.setShader()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setShader\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setPointSize",
			"annotation": "",
			"contents": "love.graphics.setPointSize(${1:size})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setPointSize\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setPointStyle",
			"annotation": "",
			"contents": "love.graphics.setPointStyle(${1:style})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setPointStyle\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setScissor",
			"annotation": "",
			"contents": "love.graphics.setScissor()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setScissor\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setWireframe",
			"annotation": "",
			"contents": "love.graphics.setWireframe(${1:enable})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setWireframe\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.setStencil",
			"annotation": "",
			"contents": "love.graphics.setStencil()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.setStencil\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.shear",
			"annotation": "",
			"contents": "love.graphics.shear(${1:kx}, ${2:ky})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.shear\">Manual</a>)"
		},
		{
			"trigger": "love.graphics.translate",
			"annotation": "",
			"contents": "love.graphics.translate(${1:dx}, ${2:dy})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.graphics.translate\">Manual</a>)"
		},

		// love.image

		{
			"trigger": "love.image.isCompressed",
			"annotation": "",
			"contents": "${1:compressed} = love.image.isCompressed(${2:filename})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.image.isCompressed\">Manual</a>)"
		},
		{
			"trigger": "love.image.newCompressedData",
			"annotation": "",
			"contents": "${1:compressedData} = love.image.newCompressedData(${2:filename})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.image.newCompressedData\">Manual</a>)"
		},
		{
			"trigger": "love.image.newImageData",
			"annotation": "",
			"contents": "${1:imageData} = love.image.newImageData(${2:width}, ${3:height})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.image.newImageData\">Manual</a>)"
		},

		// love.joystick

		{
			"trigger": "love.joystick.setGamepadMapping",
			"annotation": "",
			"contents": "${1:success} = love.joystick.setGamepadMapping(${2:guid}, ${3:button}, ${4:inputtype}, ${5:inputindex}, ${6:hatdirection})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.joystick.setGamepadMapping\">Manual</a>)"
		},
		{
			"trigger": "love.joystick.getJoystickCount",
			"annotation": "",
			"contents": "${1:joystickcount} = love.joystick.getJoystickCount()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.joystick.getJoystickCount\">Manual</a>)"
		},
		{
			"trigger": "love.joystick.getJoysticks",
			"annotation": "",
			"contents": "${1:joysticks} = love.joystick.getJoysticks()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.joystick.getJoysticks\">Manual</a>)"
		},

		// love.keyboard

		{
			"trigger": "love.keyboard.hasKeyRepeat",
			"annotation": "",
			"contents": "${1:enabled} = love.keyboard.hasKeyRepeat()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.keyboard.hasKeyRepeat\">Manual</a>)"
		},
		{
			"trigger": "love.keyboard.hasTextInput",
			"annotation": "",
			"contents": "${1:enabled} = love.keyboard.hasTextInput()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.keyboard.hasTextInput\">Manual</a>)"
		},
		{
			"trigger": "love.keyboard.isDown",
			"annotation": "",
			"contents": "${1:down} = love.keyboard.isDown(${2:key})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.keyboard.isDown\">Manual</a>)"
		},
		{
			"trigger": "love.keyboard.setKeyRepeat",
			"annotation": "",
			"contents": "love.keyboard.setKeyRepeat(${1:enable})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.keyboard.setKeyRepeat\">Manual</a>)"
		},
		{
			"trigger": "love.keyboard.setTextInput",
			"annotation": "",
			"contents": "love.keyboard.setTextInput(${1:enable})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.keyboard.setTextInput\">Manual</a>)"
		},

		// love.math

		{
			"trigger": "love.math.gammaToLinear",
			"annotation": "",
			"contents": "${1:lr}, ${2:lg}, ${3:lb} = love.math.gammaToLinear(${4:r}, ${5:g}, ${6:b})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.math.gammaToLinear\">Manual</a>)"
		},
		{
			"trigger": "love.math.getRandomSeed",
			"annotation": "",
			"contents": "${1:low}, ${2:high} = love.math.getRandomSeed()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.math.getRandomSeed\">Manual</a>)"
		},
		{
			"trigger": "love.math.getRandomState",
			"annotation": "",
			"contents": "${1:state} = love.math.getRandomState()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.math.getRandomState\">Manual</a>)"
		},
		{
			"trigger": "love.math.isConvex",
			"annotation": "",
			"contents": "${1:convex} = love.math.isConvex(${2:vertices})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.math.isConvex\">Manual</a>)"
		},
		{
			"trigger": "love.math.linearToGamma",
			"annotation": "",
			"contents": "${1:cr}, ${2:cg}, ${3:cb} = love.math.linearToGamma(${4:lr}, ${5:lg}, ${6:lb})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.math.linearToGamma\">Manual</a>)"
		},
		{
			"trigger": "love.math.newBezierCurve",
			"annotation": "",
			"contents": "${1:curve} = love.math.newBezierCurve(${2:vertices})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.math.newBezierCurve\">Manual</a>)"
		},
		{
			"trigger": "love.math.newRandomGenerator",
			"annotation": "",
			"contents": "${1:rng} = love.math.newRandomGenerator()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.math.newRandomGenerator\">Manual</a>)"
		},
		{
			"trigger": "love.math.noise",
			"annotation": "",
			"contents": "${1:value} = love.math.noise(${2:x})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.math.noise\">Manual</a>)"
		},
		{
			"trigger": "love.math.random",
			"annotation": "",
			"contents": "${1:number} = love.math.random()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.math.random\">Manual</a>)"
		},
		{
			"trigger": "love.math.randomNormal",
			"annotation": "",
			"contents": "${1:number} = love.math.randomNormal(${2:stddev}, ${3:mean})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.math.randomNormal\">Manual</a>)"
		},
		{
			"trigger": "love.math.setRandomSeed",
			"annotation": "",
			"contents": "love.math.setRandomSeed(${1:seed})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.math.setRandomSeed\">Manual</a>)"
		},
		{
			"trigger": "love.math.setRandomState",
			"annotation": "",
			"contents": "love.math.setRandomState(${1:state})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.math.setRandomState\">Manual</a>)"
		},
		{
			"trigger": "love.math.triangulate",
			"annotation": "",
			"contents": "${1:triangles} = love.math.triangulate(${2:polygon})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.math.triangulate\">Manual</a>)"
		},

		// love.mouse

		{
			"trigger": "love.mouse.getCursor",
			"annotation": "",
			"contents": "${1:cursor} = love.mouse.getCursor()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.mouse.getCursor\">Manual</a>)"
		},
		{
			"trigger": "love.mouse.getPosition",
			"annotation": "",
			"contents": "${1:x}, ${2:y} = love.mouse.getPosition()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.mouse.getPosition\">Manual</a>)"
		},
		{
			"trigger": "love.mouse.getSystemCursor",
			"annotation": "",
			"contents": "${1:cursor} = love.mouse.getSystemCursor(${2:ctype})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.mouse.getSystemCursor\">Manual</a>)"
		},
		{
			"trigger": "love.mouse.getX",
			"annotation": "",
			"contents": "${1:x} = love.mouse.getX()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.mouse.getX\">Manual</a>)"
		},
		{
			"trigger": "love.mouse.getY",
			"annotation": "",
			"contents": "${1:y} = love.mouse.getY()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.mouse.getY\">Manual</a>)"
		},
		{
			"trigger": "love.mouse.isDown",
			"annotation": "",
			"contents": "${1:down} = love.mouse.isDown(${2:button})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.mouse.isDown\">Manual</a>)"
		},
		{
			"trigger": "love.mouse.isGrabbed",
			"annotation": "",
			"contents": "${1:grabbed} = love.mouse.isGrabbed()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.mouse.isGrabbed\">Manual</a>)"
		},
		{
			"trigger": "love.mouse.isVisible",
			"annotation": "",
			"contents": "${1:visible} = love.mouse.isVisible()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.mouse.isVisible\">Manual</a>)"
		},
		{
			"trigger": "love.mouse.newCursor",
			"annotation": "",
			"contents": "${1:cursor} = love.mouse.newCursor(${2:imageData}, ${3:hotx}, ${4:hoty})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.mouse.newCursor\">Manual</a>)"
		},
		{
			"trigger": "love.mouse.setCursor",
			"annotation": "",
			"contents": "love.mouse.setCursor()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.mouse.setCursor\">Manual</a>)"
		},
		{
			"trigger": "love.mouse.setGrabbed",
			"annotation": "",
			"contents": "love.mouse.setGrabbed(${1:grab})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.mouse.setGrabbed\">Manual</a>)"
		},
		{
			"trigger": "love.mouse.setPosition",
			"annotation": "",
			"contents": "love.mouse.setPosition(${1:x}, ${2:y})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.mouse.setPosition\">Manual</a>)"
		},
		{
			"trigger": "love.mouse.setVisible",
			"annotation": "",
			"contents": "love.mouse.setVisible(${1:visible})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.mouse.setVisible\">Manual</a>)"
		},
		{
			"trigger": "love.mouse.setX",
			"annotation": "",
			"contents": "love.mouse.setX(${1:x})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.mouse.setX\">Manual</a>)"
		},
		{
			"trigger": "love.mouse.setY",
			"annotation": "",
			"contents": "love.mouse.setY(${1:y})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.mouse.setY\">Manual</a>)"
		},

		// love.physics

		{
			"trigger": "love.physics.getDistance",
			"annotation": "",
			"contents": "${1:distance}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2} = love.physics.getDistance(${6:fixture1}, ${7:fixture2})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.getDistance\">Manual</a>)"
		},
		{
			"trigger": "love.physics.getMeter",
			"annotation": "",
			"contents": "${1:scale} = love.physics.getMeter()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.getMeter\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newBody",
			"annotation": "",
			"contents": "${1:body} = love.physics.newBody(${2:world}, ${3:x}, ${4:y}, ${5:type})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newBody\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newChainShape",
			"annotation": "",
			"contents": "${1:shape} = love.physics.newChainShape(${2:loop}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newChainShape\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newCircleShape",
			"annotation": "",
			"contents": "${1:shape} = love.physics.newCircleShape(${2:body}, ${3:x}, ${4:y}, ${5:radius})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newCircleShape\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newDistanceJoint",
			"annotation": "",
			"contents": "${1:joint} = love.physics.newDistanceJoint(${2:body1}, ${3:body2}, ${4:x1}, ${5:y1}, ${6:x2}, ${7:y2}, ${8:collideConnected})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newDistanceJoint\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newEdgeShape",
			"annotation": "",
			"contents": "${1:shape} = love.physics.newEdgeShape(${2:x1}, ${3:y1}, ${4:x2}, ${5:y2})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newEdgeShape\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newFixture",
			"annotation": "",
			"contents": "${1:fixture} = love.physics.newFixture(${2:body}, ${3:shape}, ${4:density})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newFixture\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newFrictionJoint",
			"annotation": "",
			"contents": "${1:joint} = love.physics.newFrictionJoint(${2:body1}, ${3:body2}, ${4:x}, ${5:y}, ${6:collideConnected})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newFrictionJoint\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newGearJoint",
			"annotation": "",
			"contents": "${1:joint} = love.physics.newGearJoint(${2:joint1}, ${3:joint2}, ${4:ratio}, ${5:collideConnected})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newGearJoint\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newMouseJoint",
			"annotation": "",
			"contents": "${1:joint} = love.physics.newMouseJoint(${2:body}, ${3:x}, ${4:y})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newMouseJoint\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newPolygonShape",
			"annotation": "",
			"contents": "${1:shape} = love.physics.newPolygonShape(${2:body}, ${3:...})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newPolygonShape\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newPrismaticJoint",
			"annotation": "",
			"contents": "${1:joint} = love.physics.newPrismaticJoint(${2:body1}, ${3:body2}, ${4:x}, ${5:y}, ${6:ax}, ${7:ay}, ${8:collideConnected})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newPrismaticJoint\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newPulleyJoint",
			"annotation": "",
			"contents": "${1:joint} = love.physics.newPulleyJoint(${2:body1}, ${3:body2}, ${4:gx1}, ${5:gy1}, ${6:gx2}, ${7:gy2}, ${8:x1}, ${9:y1}, ${10:x2}, ${11:y2}, ${12:ratio}, ${13:collideConnected})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newPulleyJoint\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newRectangleShape",
			"annotation": "",
			"contents": "${1:shape} = love.physics.newRectangleShape(${2:body}, ${3:x}, ${4:y}, ${5:width}, ${6:height}, ${7:angle})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newRectangleShape\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newRevoluteJoint",
			"annotation": "",
			"contents": "${1:joint} = love.physics.newRevoluteJoint(${2:body1}, ${3:body2}, ${4:x}, ${5:y}, ${6:collideConnected})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newRevoluteJoint\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newRopeJoint",
			"annotation": "",
			"contents": "${1:joint} = love.physics.newRopeJoint(${2:body1}, ${3:body2}, ${4:x1}, ${5:y1}, ${6:x2}, ${7:y2}, ${8:maxLength}, ${9:collideConnected})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newRopeJoint\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newWeldJoint",
			"annotation": "",
			"contents": "${1:joint} = love.physics.newWeldJoint(${2:body1}, ${3:body2}, ${4:x}, ${5:y}, ${6:collideConnected})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newWeldJoint\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newWheelJoint",
			"annotation": "",
			"contents": "${1:joint} = love.physics.newWheelJoint(${2:body1}, ${3:body2}, ${4:x}, ${5:y}, ${6:ax}, ${7:ay}, ${8:collideConnected})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newWheelJoint\">Manual</a>)"
		},
		{
			"trigger": "love.physics.newWorld",
			"annotation": "",
			"contents": "${1:world} = love.physics.newWorld(${2:xg}, ${3:yg}, ${4:sleep})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.newWorld\">Manual</a>)"
		},
		{
			"trigger": "love.physics.setMeter",
			"annotation": "",
			"contents": "love.physics.setMeter(${1:scale})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.physics.setMeter\">Manual</a>)"
		},

		// love.sound

		{
			"trigger": "love.sound.newSoundData",
			"annotation": "",
			"contents": "${1:soundData} = love.sound.newSoundData(${2:filename})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.sound.newSoundData\">Manual</a>)"
		},

		// love.system

		{
			"trigger": "love.system.getClipboardText",
			"annotation": "",
			"contents": "${1:text} = love.system.getClipboardText()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.system.getClipboardText\">Manual</a>)"
		},
		{
			"trigger": "love.system.getOS",
			"annotation": "",
			"contents": "${1:os_string} = love.system.getOS()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.system.getOS\">Manual</a>)"
		},
		{
			"trigger": "love.system.getPowerInfo",
			"annotation": "",
			"contents": "${1:state}, ${2:percent}, ${3:seconds} = love.system.getPowerInfo()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.system.getPowerInfo\">Manual</a>)"
		},
		{
			"trigger": "love.system.getProcessorCount",
			"annotation": "",
			"contents": "${1:cores} = love.system.getProcessorCount()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.system.getProcessorCount\">Manual</a>)"
		},
		{
			"trigger": "love.system.openURL",
			"annotation": "",
			"contents": "${1:success} = love.system.openURL(${2:url})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.system.openURL\">Manual</a>)"
		},
		{
			"trigger": "love.system.setClipboardText",
			"annotation": "",
			"contents": "love.system.setClipboardText(${1:text})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.system.setClipboardText\">Manual</a>)"
		},

		// love.thread

		{
			"trigger": "love.thread.getChannel",
			"annotation": "",
			"contents": "${1:channel} = love.thread.getChannel(${2:name})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.thread.getChannel\">Manual</a>)"
		},
		{
			"trigger": "love.thread.newChannel",
			"annotation": "",
			"contents": "${1:channel} = love.thread.newChannel()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.thread.newChannel\">Manual</a>)"
		},
		{
			"trigger": "love.thread.newThread",
			"annotation": "",
			"contents": "${1:thread} = love.thread.newThread(${2:name}, ${3:filename})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.thread.newThread\">Manual</a>)"
		},

		// love.timer

		{
			"trigger": "love.timer.getAverageDelta",
			"annotation": "",
			"contents": "${1:delta} = love.timer.getAverageDelta()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.timer.getAverageDelta\">Manual</a>)"
		},
		{
			"trigger": "love.timer.getDelta",
			"annotation": "",
			"contents": "${1:dt} = love.timer.getDelta()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.timer.getDelta\">Manual</a>)"
		},
		{
			"trigger": "love.timer.getFPS",
			"annotation": "",
			"contents": "${1:fps} = love.timer.getFPS()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.timer.getFPS\">Manual</a>)"
		},
		{
			"trigger": "love.timer.getTime",
			"annotation": "",
			"contents": "${1:time} = love.timer.getTime()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.timer.getTime\">Manual</a>)"
		},
		{
			"trigger": "love.timer.sleep",
			"annotation": "",
			"contents": "love.timer.sleep(${1:s})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.timer.sleep\">Manual</a>)"
		},
		{
			"trigger": "love.timer.step",
			"annotation": "",
			"contents": "love.timer.step()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.timer.step\">Manual</a>)"
		},

		// love.touch



		// love.video



		// love.window

		{
			"trigger": "love.window.getDimensions",
			"annotation": "",
			"contents": "${1:width}, ${2:height} = love.window.getDimensions()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.getDimensions\">Manual</a>)"
		},
		{
			"trigger": "love.window.getFullscreen",
			"annotation": "",
			"contents": "${1:fullscreen}, ${2:fstype} = love.window.getFullscreen()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.getFullscreen\">Manual</a>)"
		},
		{
			"trigger": "love.window.getFullscreenModes",
			"annotation": "",
			"contents": "${1:modes} = love.window.getFullscreenModes(${2:display})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.getFullscreenModes\">Manual</a>)"
		},
		{
			"trigger": "love.window.getHeight",
			"annotation": "",
			"contents": "${1:height} = love.window.getHeight()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.getHeight\">Manual</a>)"
		},
		{
			"trigger": "love.window.getIcon",
			"annotation": "",
			"contents": "${1:imagedata} = love.window.getIcon()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.getIcon\">Manual</a>)"
		},
		{
			"trigger": "love.window.getMode",
			"annotation": "",
			"contents": "${1:width}, ${2:height}, ${3:fullscreen}, ${4:vsync}, ${5:fsaa} = love.window.getMode()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.getMode\">Manual</a>)"
		},
		{
			"trigger": "love.window.getPixelScale",
			"annotation": "",
			"contents": "${1:scale} = love.window.getPixelScale()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.getPixelScale\">Manual</a>)"
		},
		{
			"trigger": "love.window.getWidth",
			"annotation": "",
			"contents": "${1:width} = love.window.getWidth()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.getWidth\">Manual</a>)"
		},
		{
			"trigger": "love.window.hasFocus",
			"annotation": "",
			"contents": "${1:focus} = love.window.hasFocus()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.hasFocus\">Manual</a>)"
		},
		{
			"trigger": "love.window.hasMouseFocus",
			"annotation": "",
			"contents": "${1:focus} = love.window.hasMouseFocus()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.hasMouseFocus\">Manual</a>)"
		},
		{
			"trigger": "love.window.isCreated",
			"annotation": "",
			"contents": "${1:created} = love.window.isCreated()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.isCreated\">Manual</a>)"
		},
		{
			"trigger": "love.window.isVisible",
			"annotation": "",
			"contents": "${1:visible} = love.window.isVisible()",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.isVisible\">Manual</a>)"
		},
		{
			"trigger": "love.window.setFullscreen",
			"annotation": "",
			"contents": "${1:success} = love.window.setFullscreen(${2:fullscreen})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.setFullscreen\">Manual</a>)"
		},
		{
			"trigger": "love.window.setIcon",
			"annotation": "",
			"contents": "${1:success} = love.window.setIcon(${2:imagedata})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.setIcon\">Manual</a>)"
		},
		{
			"trigger": "love.window.setMode",
			"annotation": "",
			"contents": "${1:success} = love.window.setMode(${2:width}, ${3:height}, ${4:flags})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.setMode\">Manual</a>)"
		},
		{
			"trigger": "love.window.setTitle",
			"annotation": "",
			"contents": "love.window.setTitle(${1:title})",
			"kind": "function",
			"details": "(<a href=\"https://love2d.org/wiki/love.window.setTitle\">Manual</a>)"
		}
	]
}
